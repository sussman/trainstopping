Debugging log of Inform 7
NI called as: /Applications/Inform.app/Contents/Resources/Compilers/ni -rules /Applications/Inform.app/Contents/Resources/Inform7/Extensions -package /Users/sussman/projects/robber/robber.inform -extension=z5 


-----------------------------------------------------
Phase I ... Lexical analysis
-----------------------------------------------------

[Verifying lexer output: 241 words]
[Okay: Lexer output correct]
I've now read your source text, which is 294 words long.
Created object: O0


-----------------------------------------------------
Phase II ... Semantic analysis I
-----------------------------------------------------

[Verifying lexer output: 24163 words]
[Okay: Lexer output correct]
I've also read Standard Rules by Graham Nelson, which is 25654 words long.
[Registering plural of person as people]
[Registering plural of person as persons]
[Registering plural of man as men]
[Registering plural of woman as women]
Created property: p0_map_region
Created property: p1_description
Created property: p2_printed_name
Created property: p3_initial_appearance
Created property: p4_printed_plural_name
Created property: p5_inventory_listing
Created property: p6_indefinite_article
Created property: with_key
Created property: p8_other_side
Created property: p9_carrying_capacity
Created property: p10_opposite
Created property: p11_inform_property
Created property: p12_inform_object


-----------------------------------------------------
Phase III ... Semantic analysis II
-----------------------------------------------------

[Verifying parse tree]
[Okay: 5120 nodes: root has 1445 children]


-----------------------------------------------------
Phase IV ... Semantic analysis III
-----------------------------------------------------

Created adjectival phrase: A0'adjacent'
Created adjectival phrase: A1'visible'
Created adjectival phrase: A2'touchable'
Created adjectival phrase: A3'invisible'
Created adjectival phrase: A4'untouchable'
Created adjectival phrase: A5'concealed'
Created adjectival phrase: A6'unconcealed'
Created adjectival phrase: A7'on-stage'
Created adjectival phrase: A8'off-stage'


-----------------------------------------------------
Phase V ... First pass through assertions
-----------------------------------------------------

[Constructing plural of room as rooms]
Reading plural of <room> as <rooms>
Created object: O1'room'
Setting kind of K1'room' to K0
[Changed subject of sentences to K1'room']
[Changed object of sentences to K1'room']
[Constructing plural of thing as things]
Reading plural of <thing> as <things>
Created object: O2'thing'
Setting kind of K2'thing' to K0
[Changed subject of sentences to K2'thing']
[Changed object of sentences to K2'thing']
[Constructing plural of direction as directions]
Reading plural of <direction> as <directions>
Created object: O3'direction'
Setting kind of K3'direction' to K0
[Changed subject of sentences to K3'direction']
[Changed object of sentences to K3'direction']
[Constructing plural of door as doors]
Reading plural of <door> as <doors>
Created object: O4'door'
Setting kind of K4'door' to K2'thing'
[Changed subject of sentences to K4'door']
[Changed object of sentences to K4'door']
[Constructing plural of container as containers]
Reading plural of <container> as <containers>
Created object: O5'container'
Setting kind of K5'container' to K2'thing'
[Changed subject of sentences to K5'container']
[Changed object of sentences to K5'container']
[Constructing plural of supporter as supporters]
Reading plural of <supporter> as <supporters>
Created object: O6'supporter'
Setting kind of K6'supporter' to K2'thing'
[Changed subject of sentences to K6'supporter']
[Changed object of sentences to K6'supporter']
[Constructing plural of backdrop as backdrops]
Reading plural of <backdrop> as <backdrops>
Created object: O7'backdrop'
Setting kind of K7'backdrop' to K2'thing'
[Changed subject of sentences to K7'backdrop']
[Changed object of sentences to K7'backdrop']
Reading plural of <person> as <people>
Reading plural of <person> as <persons>
[Constructing plural of person as persons]
Reading plural of <person> as <persons>
Created object: O8'person'
Setting kind of K8'person' to K2'thing'
[Changed subject of sentences to K8'person']
[Changed object of sentences to K8'person']
[Constructing plural of region as regions]
Reading plural of <region> as <regions>
Created object: O9'region'
Setting kind of K9'region' to K0
[Changed subject of sentences to K9'region']
[Changed object of sentences to K9'region']
    Checking new either/or name lighted: NULL-PROPERTY (count 2)
    Meaning as type: 'lighted'/UNKNOWN_TY
    Checking new antonym dark
    Meaning as type: 'dark'/UNKNOWN_TY
Created property: p13_lighted
    Allowing K1'room' to provide 'lighted' - CONDITION_TY -> p13_lighted
Created property: p14_dark
    Allowing K1'room' to provide 'lighted' - CONDITION_TY -> p13_lighted
[Changed subject of sentences to K1'room']
[Changed object of sentences to K1'room']
    Checking new either/or name visited: NULL-PROPERTY (count 2)
    Meaning as type: 'visited'/UNKNOWN_TY
    Checking new antonym unvisited
    Meaning as type: 'unvisited'/UNKNOWN_TY
Created property: p15_visited
    Allowing K1'room' to provide 'visited' - CONDITION_TY -> p15_visited
Created property: p16_unvisited
    Allowing K1'room' to provide 'visited' - CONDITION_TY -> p15_visited
    Allowing K1'room' to provide 'map region' - VALUE_TY/CLASSIFIED_TY -> p0_map_region
    Allowing K1'room' to provide 'description' - VALUE_TY/CLASSIFIED_TY -> p1_description
    Allowing K1'room' to provide 'printed name' - VALUE_TY/CLASSIFIED_TY -> p2_printed_name
    Allowing K2'thing' to provide 'description' - VALUE_TY/TEXT_TY -> p1_description
[Changed subject of sentences to K2'thing']
[Changed object of sentences to K2'thing']
    Allowing K2'thing' to provide 'initial appearance' - VALUE_TY/CLASSIFIED_TY -> p3_initial_appearance
    Allowing K2'thing' to provide 'printed name' - VALUE_TY/TEXT_TY -> p2_printed_name
    Allowing K2'thing' to provide 'printed plural name' - VALUE_TY/CLASSIFIED_TY -> p4_printed_plural_name
    Allowing K2'thing' to provide 'inventory listing' - VALUE_TY/CLASSIFIED_TY -> p5_inventory_listing
    Allowing K2'thing' to provide 'indefinite article' - VALUE_TY/CLASSIFIED_TY -> p6_indefinite_article
    Allowing K2'thing' to provide 'matching key' - VALUE_TY/CLASSIFIED_TY -> with_key
    Checking new either/or name enterable: NULL-PROPERTY (count 1)
    Meaning as type: 'enterable'/UNKNOWN_TY
Created property: p17_enterable
    Allowing K2'thing' to provide 'enterable' - CONDITION_TY -> p17_enterable
    Checking new either/or name lit: NULL-PROPERTY (count 2)
    Meaning as type: 'lit'/UNKNOWN_TY
    Checking new antonym unlit
    Meaning as type: 'unlit'/UNKNOWN_TY
Created property: p18_lit
    Allowing K2'thing' to provide 'lit' - CONDITION_TY -> p18_lit
Created property: p19_unlit
    Allowing K2'thing' to provide 'lit' - CONDITION_TY -> p18_lit
    Checking new either/or name edible: NULL-PROPERTY (count 2)
    Meaning as type: 'edible'/UNKNOWN_TY
    Checking new antonym inedible
    Meaning as type: 'inedible'/UNKNOWN_TY
Created property: p20_edible
    Allowing K2'thing' to provide 'edible' - CONDITION_TY -> p20_edible
Created property: p21_inedible
    Allowing K2'thing' to provide 'edible' - CONDITION_TY -> p20_edible
    Checking new either/or name opaque: NULL-PROPERTY (count 2)
    Meaning as type: 'opaque'/UNKNOWN_TY
    Checking new antonym transparent
    Meaning as type: 'transparent'/UNKNOWN_TY
Created property: p22_opaque
    Allowing K2'thing' to provide 'opaque' - CONDITION_TY -> p22_opaque
Created property: p23_transparent
    Allowing K2'thing' to provide 'opaque' - CONDITION_TY -> p22_opaque
    Checking new either/or name described: NULL-PROPERTY (count 2)
    Meaning as type: 'described'/UNKNOWN_TY
    Checking new antonym undescribed
    Meaning as type: 'undescribed'/UNKNOWN_TY
Created property: p24_described
    Allowing K2'thing' to provide 'described' - CONDITION_TY -> p24_described
Created property: p25_undescribed
    Allowing K2'thing' to provide 'described' - CONDITION_TY -> p24_described
    Checking new either/or name fixed in place: NULL-PROPERTY (count 2)
    Meaning as type: 'fixed in place'/UNKNOWN_TY
    Checking new antonym portable
    Meaning as type: 'portable'/UNKNOWN_TY
Created property: p26_fixed_in_place
    Allowing K2'thing' to provide 'fixed in place' - CONDITION_TY -> p26_fixed_in_place
Created property: p27_portable
    Allowing K2'thing' to provide 'fixed in place' - CONDITION_TY -> p26_fixed_in_place
    Checking new either/or name scenery: NULL-PROPERTY (count 1)
    Meaning as type: 'scenery'/UNKNOWN_TY
Created property: p28_scenery
    Allowing K2'thing' to provide 'scenery' - CONDITION_TY -> p28_scenery
    Checking new either/or name wearable: NULL-PROPERTY (count 1)
    Meaning as type: 'wearable'/UNKNOWN_TY
Created property: p29_wearable
    Allowing K2'thing' to provide 'wearable' - CONDITION_TY -> p29_wearable
    Checking new either/or name handled: NULL-PROPERTY (count 1)
    Meaning as type: 'handled'/UNKNOWN_TY
Created property: p30_handled
    Allowing K2'thing' to provide 'handled' - CONDITION_TY -> p30_handled
    Checking new either/or name pushable between rooms: NULL-PROPERTY (count 1)
    Meaning as type: 'pushable between rooms'/UNKNOWN_TY
Created property: p31_pushable_between_rooms
    Allowing K2'thing' to provide 'pushable between rooms' - CONDITION_TY -> p31_pushable_between_rooms
    Checking new either/or name an inform library door: NULL-PROPERTY (count 1)
    Meaning as type: 'an inform library door'/UNKNOWN_TY
Created property: p32_an_inform_library_door
    Allowing K2'thing' to provide 'an inform library door' - CONDITION_TY -> p32_an_inform_library_door
    Checking new either/or name an inform library container: NULL-PROPERTY (count 1)
    Meaning as type: 'an inform library container'/UNKNOWN_TY
Created property: p33_an_inform_library_contai
    Allowing K2'thing' to provide 'an inform library container' - CONDITION_TY -> p33_an_inform_library_contai
    Checking new either/or name an inform library supporter: NULL-PROPERTY (count 1)
    Meaning as type: 'an inform library supporter'/UNKNOWN_TY
Created property: p34_an_inform_library_suppor
    Allowing K2'thing' to provide 'an inform library supporter' - CONDITION_TY -> p34_an_inform_library_suppor
    Checking new either/or name inform library switchable: NULL-PROPERTY (count 1)
    Meaning as type: 'inform library switchable'/UNKNOWN_TY
Created property: p35_inform_library_switchabl
    Allowing K2'thing' to provide 'inform library switchable' - CONDITION_TY -> p35_inform_library_switchabl
    Checking new either/or name an inform library animate object: NULL-PROPERTY (count 1)
    Meaning as type: 'an inform library animate object'/UNKNOWN_TY
Created property: p36_an_inform_library_animat
    Allowing K2'thing' to provide 'an inform library animate object' - CONDITION_TY -> p36_an_inform_library_animat
    Checking new either/or name an inform library male: NULL-PROPERTY (count 1)
    Meaning as type: 'an inform library male'/UNKNOWN_TY
Created property: p37_an_inform_library_male
    Allowing K2'thing' to provide 'an inform library male' - CONDITION_TY -> p37_an_inform_library_male
    Checking new either/or name marked for listing: NULL-PROPERTY (count 2)
    Meaning as type: 'marked for listing'/UNKNOWN_TY
    Checking new antonym unmarked for listing
    Meaning as type: 'unmarked for listing'/UNKNOWN_TY
Created property: p38_marked_for_listing
    Allowing K2'thing' to provide 'marked for listing' - CONDITION_TY -> p38_marked_for_listing
Created property: p39_unmarked_for_listing
    Allowing K2'thing' to provide 'marked for listing' - CONDITION_TY -> p38_marked_for_listing
    Checking new either/or name mentioned: NULL-PROPERTY (count 2)
    Meaning as type: 'mentioned'/UNKNOWN_TY
    Checking new antonym unmentioned
    Meaning as type: 'unmentioned'/UNKNOWN_TY
Created property: p40_mentioned
    Allowing K2'thing' to provide 'mentioned' - CONDITION_TY -> p40_mentioned
Created property: p41_unmentioned
    Allowing K2'thing' to provide 'mentioned' - CONDITION_TY -> p40_mentioned
    Checking new either/or name initially carried: NULL-PROPERTY (count 1)
    Meaning as type: 'initially carried'/UNKNOWN_TY
Created property: p42_initially_carried
    Allowing K2'thing' to provide 'initially carried' - CONDITION_TY -> p42_initially_carried
[Changed subject of sentences to K4'door']
[Changed object of sentences to K4'door']
    Checking new either/or name open: NULL-PROPERTY (count 2)
    Meaning as type: 'open'/UNKNOWN_TY
    Checking new antonym closed
    Meaning as type: 'closed'/UNKNOWN_TY
Created property: p43_open
    Allowing K4'door' to provide 'open' - CONDITION_TY -> p43_open
Created property: p44_closed
    Allowing K4'door' to provide 'open' - CONDITION_TY -> p43_open
    Checking new either/or name openable: NULL-PROPERTY (count 2)
    Meaning as type: 'openable'/UNKNOWN_TY
    Checking new antonym unopenable
    Meaning as type: 'unopenable'/UNKNOWN_TY
Created property: p45_openable
    Allowing K4'door' to provide 'openable' - CONDITION_TY -> p45_openable
Created property: p46_unopenable
    Allowing K4'door' to provide 'openable' - CONDITION_TY -> p45_openable
    Checking new either/or name lockable: NULL-PROPERTY (count 1)
    Meaning as type: 'lockable'/UNKNOWN_TY
Created property: p47_lockable
    Allowing K4'door' to provide 'lockable' - CONDITION_TY -> p47_lockable
    Checking new either/or name locked: NULL-PROPERTY (count 2)
    Meaning as type: 'locked'/UNKNOWN_TY
    Checking new antonym unlocked
    Meaning as type: 'unlocked'/UNKNOWN_TY
Created property: p48_locked
    Allowing K4'door' to provide 'locked' - CONDITION_TY -> p48_locked
Created property: p49_unlocked
    Allowing K4'door' to provide 'locked' - CONDITION_TY -> p48_locked
    Allowing K4'door' to provide 'other side' - VALUE_TY/CLASSIFIED_TY -> p8_other_side
    Allowing K4'door' to provide 'other side' - VALUE_TY/OBJECT_TY(<null>) -> p8_other_side
[Changed subject of sentences to K5'container']
[Changed object of sentences to K5'container']
    Checking new either/or name open: 'open' - CONDITION_TY/~'closed' -> p43_open (count 2)
    Checking new antonym closed
    Allowing K5'container' to provide 'open' - CONDITION_TY/~'closed' -> p43_open
    Allowing K5'container' to provide 'open' - CONDITION_TY/~'closed' -> p43_open
    Checking new either/or name openable: 'openable' - CONDITION_TY/~'unopenable' -> p45_openable (count 2)
    Checking new antonym unopenable
    Allowing K5'container' to provide 'openable' - CONDITION_TY/~'unopenable' -> p45_openable
    Allowing K5'container' to provide 'openable' - CONDITION_TY/~'unopenable' -> p45_openable
    Checking new either/or name lockable: 'lockable' - CONDITION_TY -> p47_lockable (count 1)
    Allowing K5'container' to provide 'lockable' - CONDITION_TY -> p47_lockable
    Checking new either/or name locked: 'locked' - CONDITION_TY/~'unlocked' -> p48_locked (count 2)
    Checking new antonym unlocked
    Allowing K5'container' to provide 'locked' - CONDITION_TY/~'unlocked' -> p48_locked
    Allowing K5'container' to provide 'locked' - CONDITION_TY/~'unlocked' -> p48_locked
    Allowing K5'container' to provide 'carrying capacity' - VALUE_TY/CLASSIFIED_TY -> p9_carrying_capacity
    Allowing K2'thing' to provide 'matching key' - VALUE_TY/OBJECT_TY(<null>) -> with_key
[Constructing plural of player's holdall as player's holdalls]
Reading plural of <player's holdall> as <player's holdalls>
Created object: O10'player's holdall'
Setting kind of K10'player's holdall' to K5'container'
[Changed subject of sentences to K10'player's holdall']
[Changed object of sentences to K10'player's holdall']
[Changed subject of sentences to K6'supporter']
[Changed object of sentences to K6'supporter']
    Allowing K6'supporter' to provide 'carrying capacity' - VALUE_TY/NUMBER_TY -> p9_carrying_capacity
[Constructing plural of device as devices]
Reading plural of <device> as <devices>
Created object: O11'device'
Setting kind of K11'device' to K2'thing'
[Changed subject of sentences to K11'device']
[Changed object of sentences to K11'device']
    Checking new either/or name switched on: NULL-PROPERTY (count 2)
    Meaning as type: 'switched on'/UNKNOWN_TY
    Checking new antonym switched off
    Meaning as type: 'switched off'/UNKNOWN_TY
Created property: p50_switched_on
    Allowing K11'device' to provide 'switched on' - CONDITION_TY -> p50_switched_on
Created property: p51_switched_off
    Allowing K11'device' to provide 'switched on' - CONDITION_TY -> p50_switched_on
    Allowing K3'direction' to provide 'opposite' - VALUE_TY/CLASSIFIED_TY -> p10_opposite
[Changed subject of sentences to K3'direction']
[Changed object of sentences to K3'direction']
    Allowing K3'direction' to provide 'inform property' - VALUE_TY/CLASSIFIED_TY -> p11_inform_property
    Allowing K3'direction' to provide 'inform object' - VALUE_TY/CLASSIFIED_TY -> p12_inform_object
    Checking new either/or name marked for listing: 'marked for listing' - CONDITION_TY/~'unmarked for listing' -> p38_marked_for_listing (count 2)
    Checking new antonym unmarked for listing
    Allowing K3'direction' to provide 'marked for listing' - CONDITION_TY/~'unmarked for listing' -> p38_marked_for_listing
    Allowing K3'direction' to provide 'marked for listing' - CONDITION_TY/~'unmarked for listing' -> p38_marked_for_listing
[Constructing plural of north as norths]
Reading plural of <north> as <norths>
Created object: O12'north'
Setting kind of O12'north' to K3'direction'
[Constructing plural of northeast as northeasts]
Reading plural of <northeast> as <northeasts>
Created object: O13'northeast'
Setting kind of O13'northeast' to K3'direction'
[Constructing plural of northwest as northwests]
Reading plural of <northwest> as <northwests>
Created object: O14'northwest'
Setting kind of O14'northwest' to K3'direction'
[Constructing plural of south as souths]
Reading plural of <south> as <souths>
Created object: O15'south'
Setting kind of O15'south' to K3'direction'
[Constructing plural of southeast as southeasts]
Reading plural of <southeast> as <southeasts>
Created object: O16'southeast'
Setting kind of O16'southeast' to K3'direction'
[Constructing plural of southwest as southwests]
Reading plural of <southwest> as <southwests>
Created object: O17'southwest'
Setting kind of O17'southwest' to K3'direction'
[Constructing plural of east as easts]
Reading plural of <east> as <easts>
Created object: O18'east'
Setting kind of O18'east' to K3'direction'
[Constructing plural of west as wests]
Reading plural of <west> as <wests>
Created object: O19'west'
Setting kind of O19'west' to K3'direction'
[Constructing plural of up as ups]
Reading plural of <up> as <ups>
Created object: O20'up'
Setting kind of O20'up' to K3'direction'
[Constructing plural of down as downs]
Reading plural of <down> as <downs>
Created object: O21'down'
Setting kind of O21'down' to K3'direction'
[Constructing plural of inside as insides]
Reading plural of <inside> as <insides>
Created object: O22'inside'
Setting kind of O22'inside' to K3'direction'
[Constructing plural of outside as outsides]
Reading plural of <outside> as <outsides>
Created object: O23'outside'
Setting kind of O23'outside' to K3'direction'
[Changed subject of sentences to K8'person']
[Changed object of sentences to K8'person']
    Checking new either/or name female: NULL-PROPERTY (count 2)
    Meaning as type: 'female'/UNKNOWN_TY
    Checking new antonym male
    Meaning as type: 'male'/UNKNOWN_TY
Created property: p52_female
    Allowing K8'person' to provide 'female' - CONDITION_TY -> p52_female
Created property: p53_male
    Allowing K8'person' to provide 'female' - CONDITION_TY -> p52_female
    Allowing K8'person' to provide 'carrying capacity' - VALUE_TY/NUMBER_TY -> p9_carrying_capacity
[Constructing plural of animal as animals]
Reading plural of <animal> as <animals>
Created object: O24'animal'
Setting kind of K24'animal' to K8'person'
[Changed subject of sentences to K24'animal']
[Changed object of sentences to K24'animal']
Reading plural of <man> as <men>
[Constructing plural of man as mans]
Reading plural of <man> as <mans>
Created object: O25'man'
Setting kind of K25'man' to K8'person'
[Changed subject of sentences to K25'man']
[Changed object of sentences to K25'man']
Reading plural of <woman> as <women>
Created object: O26'woman'
Setting kind of K26'woman' to K8'person'
[Changed subject of sentences to K26'woman']
[Changed object of sentences to K26'woman']
    Checking new either/or name neuter: NULL-PROPERTY (count 1)
    Meaning as type: 'neuter'/UNKNOWN_TY
Created property: p54_neuter
    Allowing K8'person' to provide 'neuter' - CONDITION_TY -> p54_neuter
[Changed subject of sentences to K8'person']
[Changed object of sentences to K8'person']
[Changed subject of sentences to K26'woman']
[Changed object of sentences to K26'woman']
[Changed subject of sentences to K25'man']
[Changed object of sentences to K25'man']
[Constructing plural of player-character as player-characters]
Reading plural of <player-character> as <player-characters>
Created object: O27'player-character'
Setting kind of K27'player-character' to K8'person'
[Changed subject of sentences to K27'player-character']
[Changed object of sentences to K27'player-character']
[Constructing plural of player as players]
Reading plural of <player> as <players>
Created object: O28'player'
Uncreated object: O28'player'
[Constructing plural of yourself as yourselfs]
Reading plural of <yourself> as <yourselfs>
Created object: O29'yourself'
Setting kind of O29'yourself' to K27'player-character'
[Changed subject of sentences to O29'yourself']
[Changed object of sentences to O29'yourself']
[Constructing plural of vehicle as vehicles]
Reading plural of <vehicle> as <vehicles>
Created object: O30'vehicle'
Setting kind of K30'vehicle' to K5'container'
[Changed subject of sentences to K30'vehicle']
[Changed object of sentences to K30'vehicle']
[Changed subject of sentences to K7'backdrop']
[Changed object of sentences to K7'backdrop']
[Constructing plural of location -- documented at var_location -- as location -- documented at var_location --s]
Reading plural of <location -- documented at var_location --> as <location -- documented at var_location --s>
Created object: O31'location -- documented at var_location --'
Uncreated object: O31'location -- documented at var_location --'
[Constructing plural of score -- documented at var_score -- as score -- documented at var_score --s]
Reading plural of <score -- documented at var_score --> as <score -- documented at var_score --s>
Created object: O32'score -- documented at var_score --'
Uncreated object: O32'score -- documented at var_score --'
[Constructing plural of maximum score as maximum scores]
Reading plural of <maximum score> as <maximum scores>
Created object: O33'maximum score'
Uncreated object: O33'maximum score'
[Constructing plural of turn count as turn counts]
Reading plural of <turn count> as <turn counts>
Created object: O34'turn count'
Uncreated object: O34'turn count'
[Constructing plural of time of day -- documented at var_time -- as time of day -- documented at var_time --s]
Reading plural of <time of day -- documented at var_time --> as <time of day -- documented at var_time --s>
Created object: O35'time of day -- documented at var_time --'
Uncreated object: O35'time of day -- documented at var_time --'
[Constructing plural of noun -- documented at var_noun -- as noun -- documented at var_noun --s]
Reading plural of <noun -- documented at var_noun --> as <noun -- documented at var_noun --s>
Created object: O36'noun -- documented at var_noun --'
Uncreated object: O36'noun -- documented at var_noun --'
[Constructing plural of second noun as second nouns]
Reading plural of <second noun> as <second nouns>
Created object: O37'second noun'
Uncreated object: O37'second noun'
[Constructing plural of person asked -- documented at var_person_asked -- as person asked -- documented at var_person_asked --s]
Reading plural of <person asked -- documented at var_person_asked --> as <person asked -- documented at var_person_asked --s>
Created object: O38'person asked -- documented at var_person_asked --'
Uncreated object: O38'person asked -- documented at var_person_asked --'
[Constructing plural of reason the action failed -- documented at var_reason -- as reason the action failed -- documented at var_reason --s]
Reading plural of <reason the action failed -- documented at var_reason --> as <reason the action failed -- documented at var_reason --s>
Created object: O39'reason the action failed -- documented at var_reason --'
Uncreated object: O39'reason the action failed -- documented at var_reason --'
[Constructing plural of item described as item describeds]
Reading plural of <item described> as <item describeds>
Created object: O40'item described'
Uncreated object: O40'item described'
[Constructing plural of person reaching -- documented at var_person_reaching -- as person reaching -- documented at var_person_reaching --s]
Reading plural of <person reaching -- documented at var_person_reaching --> as <person reaching -- documented at var_person_reaching --s>
Created object: O41'person reaching -- documented at var_person_reaching --'
Uncreated object: O41'person reaching -- documented at var_person_reaching --'
[Constructing plural of container in question as container in questions]
Reading plural of <container in question> as <container in questions>
Created object: O42'container in question'
Uncreated object: O42'container in question'
[Constructing plural of particular possession -- documented at var_particular -- as particular possession -- documented at var_particular --s]
Reading plural of <particular possession -- documented at var_particular --> as <particular possession -- documented at var_particular --s>
Created object: O43'particular possession -- documented at var_particular --'
Uncreated object: O43'particular possession -- documented at var_particular --'
[Constructing plural of player's command -- documented at var_command -- as player's command -- documented at var_command --s]
Reading plural of <player's command -- documented at var_command --> as <player's command -- documented at var_command --s>
Created object: O44'player's command -- documented at var_command --'
Uncreated object: O44'player's command -- documented at var_command --'
[Constructing plural of matched text as matched texts]
Reading plural of <matched text> as <matched texts>
Created object: O45'matched text'
Uncreated object: O45'matched text'
[Constructing plural of number understood -- documented at var_understood -- as number understood -- documented at var_understood --s]
Reading plural of <number understood -- documented at var_understood --> as <number understood -- documented at var_understood --s>
Created object: O46'number understood -- documented at var_understood --'
Uncreated object: O46'number understood -- documented at var_understood --'
[Constructing plural of time understood as time understoods]
Reading plural of <time understood> as <time understoods>
Created object: O47'time understood'
Uncreated object: O47'time understood'
[Constructing plural of topic understood as topic understoods]
Reading plural of <topic understood> as <topic understoods>
Created object: O48'topic understood'
Uncreated object: O48'topic understood'
[Constructing plural of command prompt -- documented at var_prompt -- as command prompt -- documented at var_prompt --s]
Reading plural of <command prompt -- documented at var_prompt --> as <command prompt -- documented at var_prompt --s>
Created object: O49'command prompt -- documented at var_prompt --'
Uncreated object: O49'command prompt -- documented at var_prompt --'
[Constructing plural of left hand status line -- documented at var_sl -- as left hand status line -- documented at var_sl --s]
Reading plural of <left hand status line -- documented at var_sl --> as <left hand status line -- documented at var_sl --s>
Created object: O50'left hand status line -- documented at var_sl --'
Uncreated object: O50'left hand status line -- documented at var_sl --'
[Constructing plural of right hand status line as right hand status lines]
Reading plural of <right hand status line> as <right hand status lines>
Created object: O51'right hand status line'
Uncreated object: O51'right hand status line'
[Constructing plural of action-processing rules as action-processing ruleses]
Reading plural of <action-processing rules> as <action-processing ruleses>
Created object: O52'action-processing rules'
Uncreated object: O52'action-processing rules'
[Constructing plural of before rules as before ruleses]
Reading plural of <before rules> as <before ruleses>
Created object: O53'before rules'
Uncreated object: O53'before rules'
[Constructing plural of instead rules as instead ruleses]
Reading plural of <instead rules> as <instead ruleses>
Created object: O54'instead rules'
Uncreated object: O54'instead rules'
[Constructing plural of after rules as after ruleses]
Reading plural of <after rules> as <after ruleses>
Created object: O55'after rules'
Uncreated object: O55'after rules'
[Constructing plural of procedural rules as procedural ruleses]
Reading plural of <procedural rules> as <procedural ruleses>
Created object: O56'procedural rules'
Uncreated object: O56'procedural rules'
[Constructing plural of accessibility rules as accessibility ruleses]
Reading plural of <accessibility rules> as <accessibility ruleses>
Created object: O57'accessibility rules'
Uncreated object: O57'accessibility rules'
[Constructing plural of action-specific rules as action-specific ruleses]
Reading plural of <action-specific rules> as <action-specific ruleses>
Created object: O58'action-specific rules'
Uncreated object: O58'action-specific rules'
[Constructing plural of carry out rules as carry out ruleses]
Reading plural of <carry out rules> as <carry out ruleses>
Created object: O59'carry out rules'
Uncreated object: O59'carry out rules'
[Constructing plural of general report rules as general report ruleses]
Reading plural of <general report rules> as <general report ruleses>
Created object: O60'general report rules'
Uncreated object: O60'general report rules'
[Constructing plural of turn sequence rules as turn sequence ruleses]
Reading plural of <turn sequence rules> as <turn sequence ruleses>
Created object: O61'turn sequence rules'
Uncreated object: O61'turn sequence rules'
[Constructing plural of reaching inside rules as reaching inside ruleses]
Reading plural of <reaching inside rules> as <reaching inside ruleses>
Created object: O62'reaching inside rules'
Uncreated object: O62'reaching inside rules'
[Constructing plural of reaching outside rules as reaching outside ruleses]
Reading plural of <reaching outside rules> as <reaching outside ruleses>
Created object: O63'reaching outside rules'
Uncreated object: O63'reaching outside rules'
[Constructing plural of general before rules as general before ruleses]
Reading plural of <general before rules> as <general before ruleses>
Created object: O64'general before rules'
Uncreated object: O64'general before rules'
[Constructing plural of actor-specific before rules as actor-specific before ruleses]
Reading plural of <actor-specific before rules> as <actor-specific before ruleses>
Created object: O65'actor-specific before rules'
Uncreated object: O65'actor-specific before rules'
[Constructing plural of location-specific before rules as location-specific before ruleses]
Reading plural of <location-specific before rules> as <location-specific before ruleses>
Created object: O66'location-specific before rules'
Uncreated object: O66'location-specific before rules'
[Constructing plural of reaction before rules as reaction before ruleses]
Reading plural of <reaction before rules> as <reaction before ruleses>
Created object: O67'reaction before rules'
Uncreated object: O67'reaction before rules'
[Constructing plural of object-specific before rules as object-specific before ruleses]
Reading plural of <object-specific before rules> as <object-specific before ruleses>
Created object: O68'object-specific before rules'
Uncreated object: O68'object-specific before rules'
[Constructing plural of general after rules as general after ruleses]
Reading plural of <general after rules> as <general after ruleses>
Created object: O69'general after rules'
Uncreated object: O69'general after rules'
[Constructing plural of actor-specific after rules as actor-specific after ruleses]
Reading plural of <actor-specific after rules> as <actor-specific after ruleses>
Created object: O70'actor-specific after rules'
Uncreated object: O70'actor-specific after rules'
[Constructing plural of location-specific after rules as location-specific after ruleses]
Reading plural of <location-specific after rules> as <location-specific after ruleses>
Created object: O71'location-specific after rules'
Uncreated object: O71'location-specific after rules'
[Constructing plural of reaction after rules as reaction after ruleses]
Reading plural of <reaction after rules> as <reaction after ruleses>
Created object: O72'reaction after rules'
Uncreated object: O72'reaction after rules'
[Constructing plural of object-specific after rules as object-specific after ruleses]
Reading plural of <object-specific after rules> as <object-specific after ruleses>
Created object: O73'object-specific after rules'
Uncreated object: O73'object-specific after rules'
[Constructing plural of when play begins as when play beginses]
Reading plural of <when play begins> as <when play beginses>
Created object: O74'when play begins'
Uncreated object: O74'when play begins'
[Constructing plural of when play ends as when play endses]
Reading plural of <when play ends> as <when play endses>
Created object: O75'when play ends'
Uncreated object: O75'when play ends'
[Constructing plural of every turn rules as every turn ruleses]
Reading plural of <every turn rules> as <every turn ruleses>
Created object: O76'every turn rules'
Uncreated object: O76'every turn rules'
[Constructing plural of check rules as check ruleses]
Reading plural of <check rules> as <check ruleses>
Created object: O77'check rules'
Uncreated object: O77'check rules'
[Constructing plural of report rules as report ruleses]
Reading plural of <report rules> as <report ruleses>
Created object: O78'report rules'
Uncreated object: O78'report rules'
[Constructing plural of persuasion rules as persuasion ruleses]
Reading plural of <persuasion rules> as <persuasion ruleses>
Created object: O79'persuasion rules'
Uncreated object: O79'persuasion rules'
[Constructing plural of unsuccessful attempt by as unsuccessful attempt bies]
Reading plural of <unsuccessful attempt by> as <unsuccessful attempt bies>
Created object: O80'unsuccessful attempt by'
Uncreated object: O80'unsuccessful attempt by'
[Constructing plural of visibility rules as visibility ruleses]
Reading plural of <visibility rules> as <visibility ruleses>
Created object: O81'visibility rules'
Uncreated object: O81'visibility rules'
[Constructing plural of does the player mean rules as does the player mean ruleses]
Reading plural of <does the player mean rules> as <does the player mean ruleses>
Created object: O82'does the player mean rules'
Uncreated object: O82'does the player mean rules'
[Constructing plural of setting action variables as setting action variableses]
Reading plural of <setting action variables> as <setting action variableses>
Created object: O83'setting action variables'
Uncreated object: O83'setting action variables'
[Constructing plural of scene changing rules as scene changing ruleses]
Reading plural of <scene changing rules> as <scene changing ruleses>
Created object: O84'scene changing rules'
Uncreated object: O84'scene changing rules'
[Constructing plural of entire game as entire games]
Reading plural of <entire game> as <entire games>
Created object: O85'entire game'
Uncreated object: O85'entire game'
Created non-library quantity: Quantity Q22_entire_game believed constant 'entire game' = VALUE_TY/SCENE_TY

Created activity: printing the name of something
Created activity: listing contents of something
Created activity: grouping together something
Created activity: constructing the status line
Created activity: listing nondescript items of something
Created activity: deciding the scope of something
Created activity: supplying a missing noun
Created activity: supplying a missing second noun
Created activity: reading a command
Created activity: deciding whether all includes something
Created activity: printing the player's obituary
Created activity: amusing a victorious player
Created activity: printing the banner text
Created activity: printing the plural name of something
Created activity: deciding the concealed possessions of something
Created activity: printing a refusal to act in the dark
Created activity: printing the announcement of darkness
Created activity: printing the name of a dark room
Created activity: printing the description of a dark room
Created activity: printing room description details of something
Created activity: printing a parser error
Created activity: implicitly taking something
Created activity: starting the virtual machine
Created activity: clarifying the parser's choice of something
Created activity: asking which do you mean
Created activity: writing a paragraph about something
Created action: taking inventory
Created action: taking
Created action: removing it from
Created action: dropping
Created action: putting it on
Created action: inserting it into
Created action: eating
Created action: going
Created action: entering
Created action: exiting
Created action: getting off
Created action: looking
Created action: examining
Created action: looking under
Created action: searching
Created action: consulting it about
Created action: locking it with
Created action: unlocking it with
Created action: switching on
Created action: switching off
Created action: opening
Created action: closing
Created action: wearing
Created action: taking off
Created action: giving it to
Created action: showing it to
Created action: waking
Created action: throwing it at
Created action: attacking
Created action: kissing
Created action: answering it that
Created action: telling it about
Created action: asking it about
Created action: asking it for
Created action: waiting
Created action: touching
Created action: waving
Created action: pulling
Created action: pushing
Created action: turning
Created action: pushing it to
Created action: squeezing
Created action: saying yes
Created action: saying no
Created action: burning
Created action: waking up
Created action: thinking
Created action: smelling
Created action: listening to
Created action: tasting
Created action: cutting
Created action: jumping
Created action: tying it to
Created action: drinking
Created action: saying sorry
Created action: swearing obscenely
Created action: swearing mildly
Created action: swinging
Created action: rubbing
Created action: setting it to
Created action: waving hands
Created action: buying
Created action: singing
Created action: climbing
Created action: sleeping
Created action: requesting the score
Created action: quitting the game
Created action: saving the game
Created action: restoring the game
Created action: restarting the game
Created action: verifying the story file
Created action: requesting the story file version
Created action: switching the story transcript on
Created action: switching the story transcript off
Created action: preferring abbreviated room descriptions
Created action: preferring unabbreviated room descriptions
Created action: preferring sometimes abbreviated room descriptions
Created action: requesting the pronoun meanings
Created action: switching score notification on
Created action: switching score notification off
[Constructing plural of say-parameter as say-parameters]
Reading plural of <say-parameter> as <say-parameters>
Created object: O86'say-parameter'
Uncreated object: O86'say-parameter'
[Constructing plural of i6-nothing as i6-nothings]
Reading plural of <i6-nothing> as <i6-nothings>
Created object: O87'i6-nothing'
Uncreated object: O87'i6-nothing'
[Constructing plural of i6-pushdir item as i6-pushdir items]
Reading plural of <i6-pushdir item> as <i6-pushdir items>
Created object: O88'i6-pushdir item'
Uncreated object: O88'i6-pushdir item'
[Constructing plural of story title as story titles]
Reading plural of <story title> as <story titles>
Created object: O89'story title'
[Constructing plural of story author as story authors]
Reading plural of <story author> as <story authors>
Created object: O90'story author'
[Constructing plural of story headline as story headlines]
Reading plural of <story headline> as <story headlines>
Created object: O91'story headline'
[Constructing plural of story genre as story genres]
Reading plural of <story genre> as <story genres>
Created object: O92'story genre'
[Constructing plural of story description as story descriptions]
Reading plural of <story description> as <story descriptions>
Created object: O93'story description'
Uncreated object: O89'story title'
Uncreated object: O90'story author'
Created non-library quantity: Quantity Q27_story_author believed variable 'story author' = VALUE_TY/TEXT_TY

Uncreated object: O91'story headline'
Created non-library quantity: Quantity Q28_story_headline believed variable 'story headline' = VALUE_TY/TEXT_TY

Uncreated object: O92'story genre'
Created non-library quantity: Quantity Q29_story_genre believed variable 'story genre' = VALUE_TY/TEXT_TY

Uncreated object: O93'story description'
Created non-library quantity: Quantity Q30_story_description believed variable 'story description' = VALUE_TY/TEXT_TY

[Constructing plural of release number as release numbers]
Reading plural of <release number> as <release numbers>
Created object: O94'release number'
Uncreated object: O94'release number'
Created non-library quantity: Quantity Q31_release_number believed variable 'release number' = VALUE_TY/NUMBER_TY

[Constructing plural of story creation year as story creation years]
Reading plural of <story creation year> as <story creation years>
Created object: O95'story creation year'
Uncreated object: O95'story creation year'
Created non-library quantity: Quantity Q32_story_creation_year believed variable 'story creation year' = VALUE_TY/NUMBER_TY

Created figure <figure of cover> = filename '<cover art>' = resource ID 1
[Constructing plural of hat as hats]
Reading plural of <hat> as <hats>
Created object: O96'hat'
[Changed subject of sentences to O29'yourself']
[Changed object of sentences to O29'yourself']
Setting kind of O96'hat' to K5'container'
[Changed subject of sentences to O96'hat']
[Changed object of sentences to O96'hat']
[Constructing plural of pocketwatch as pocketwatchs]
Reading plural of <pocketwatch> as <pocketwatchs>
Created object: O97'pocketwatch'
[Changed subject of sentences to O29'yourself']
[Changed object of sentences to O29'yourself']
Created action: time-checking
[Constructing plural of train schedule as train schedules]
Reading plural of <train schedule> as <train schedules>
Created object: O98'train schedule'
[Constructing plural of bluff as bluffs]
Reading plural of <bluff> as <bluffs>
Created object: O99'bluff'
Setting kind of O99'bluff' to K1'room'
[Changed subject of sentences to O99'bluff']
[Changed object of sentences to O99'bluff']


-----------------------------------------------------
Phase VI ... All objects and properties now created
-----------------------------------------------------

K0   K1'room'   K2'thing'   K3'direction'
K4'door'   K5'container'   K6'supporter'   K7'backdrop'
K8'person'   K9'region'   K10'player's holdall'   K11'device'
O12'north'   O13'northeast'   O14'northwest'   O15'south'
O16'southeast'   O17'southwest'   O18'east'   O19'west'
O20'up'   O21'down'   O22'inside'   O23'outside'
K24'animal'   K25'man'   K26'woman'   K27'player-character'
O29'yourself'   K30'vehicle'   O96'hat'   O97'pocketwatch'
O98'train schedule'   O99'bluff'   

'map region' - VALUE_TY/OBJECT_TY(<null>) -> p0_map_region
'description' - VALUE_TY/TEXT_TY -> p1_description
'printed name' - VALUE_TY/TEXT_TY -> p2_printed_name
'initial appearance' - VALUE_TY/TEXT_TY -> p3_initial_appearance
'printed plural name' - VALUE_TY/TEXT_TY -> p4_printed_plural_name
'inventory listing' - VALUE_TY/TEXT_TY -> p5_inventory_listing
'indefinite article' - VALUE_TY/TEXT_TY -> p6_indefinite_article
'matching key' - VALUE_TY/OBJECT_TY(<null>) -> with_key
'other side' - VALUE_TY/OBJECT_TY(<null>) -> p8_other_side
'carrying capacity' - VALUE_TY/NUMBER_TY -> p9_carrying_capacity
'opposite' - VALUE_TY/OBJECT_TY(<null>) -> p10_opposite
'inform property' - VALUE_TY/TEXT_TY -> p11_inform_property
'inform object' - VALUE_TY/TEXT_TY -> p12_inform_object
'lighted' - CONDITION_TY/~'dark' -> p13_lighted
'dark' - CONDITION_TY/~'lighted' -> p14_dark
'visited' - CONDITION_TY/~'unvisited' -> p15_visited
'unvisited' - CONDITION_TY/~'visited' -> p16_unvisited
'enterable' - CONDITION_TY -> p17_enterable
'lit' - CONDITION_TY/~'unlit' -> p18_lit
'unlit' - CONDITION_TY/~'lit' -> p19_unlit
'edible' - CONDITION_TY/~'inedible' -> p20_edible
'inedible' - CONDITION_TY/~'edible' -> p21_inedible
'opaque' - CONDITION_TY/~'transparent' -> p22_opaque
'transparent' - CONDITION_TY/~'opaque' -> p23_transparent
'described' - CONDITION_TY/~'undescribed' -> p24_described
'undescribed' - CONDITION_TY/~'described' -> p25_undescribed
'fixed in place' - CONDITION_TY/~'portable' -> p26_fixed_in_place
'portable' - CONDITION_TY/~'fixed in place' -> p27_portable
'scenery' - CONDITION_TY -> p28_scenery
'wearable' - CONDITION_TY -> p29_wearable
'handled' - CONDITION_TY -> p30_handled
'pushable between rooms' - CONDITION_TY -> p31_pushable_between_rooms
'an inform library door' - CONDITION_TY -> p32_an_inform_library_door
'an inform library container' - CONDITION_TY -> p33_an_inform_library_contai
'an inform library supporter' - CONDITION_TY -> p34_an_inform_library_suppor
'inform library switchable' - CONDITION_TY -> p35_inform_library_switchabl
'an inform library animate object' - CONDITION_TY -> p36_an_inform_library_animat
'an inform library male' - CONDITION_TY -> p37_an_inform_library_male
'marked for listing' - CONDITION_TY/~'unmarked for listing' -> p38_marked_for_listing
'unmarked for listing' - CONDITION_TY/~'marked for listing' -> p39_unmarked_for_listing
'mentioned' - CONDITION_TY/~'unmentioned' -> p40_mentioned
'unmentioned' - CONDITION_TY/~'mentioned' -> p41_unmentioned
'initially carried' - CONDITION_TY -> p42_initially_carried
'open' - CONDITION_TY/~'closed' -> p43_open
'closed' - CONDITION_TY/~'open' -> p44_closed
'openable' - CONDITION_TY/~'unopenable' -> p45_openable
'unopenable' - CONDITION_TY/~'openable' -> p46_unopenable
'lockable' - CONDITION_TY -> p47_lockable
'locked' - CONDITION_TY/~'unlocked' -> p48_locked
'unlocked' - CONDITION_TY/~'locked' -> p49_unlocked
'switched on' - CONDITION_TY/~'switched off' -> p50_switched_on
'switched off' - CONDITION_TY/~'switched on' -> p51_switched_off
'female' - CONDITION_TY/~'male' -> p52_female
'male' - CONDITION_TY/~'female' -> p53_male
'neuter' - CONDITION_TY -> p54_neuter


-----------------------------------------------------
Phase VII ... Second pass through assertions
-----------------------------------------------------

[Changed subject of sentences to K1'room']
[Changed object of sentences to K1'room']
[Changed subject of sentences to K2'thing']
[Changed object of sentences to K2'thing']
[Changed subject of sentences to K3'direction']
[Changed object of sentences to K3'direction']
[Changed subject of sentences to K4'door']
[Changed object of sentences to K4'door']
[Changed subject of sentences to K5'container']
[Changed object of sentences to K5'container']
[Changed subject of sentences to K6'supporter']
[Changed object of sentences to K6'supporter']
[Changed subject of sentences to K7'backdrop']
[Changed object of sentences to K7'backdrop']
[Changed subject of sentences to K8'person']
[Changed object of sentences to K8'person']
[Changed subject of sentences to K9'region']
[Changed object of sentences to K9'region']
Created property: p55_specification
Evaluated APL pwo as DESCRIPTION_TY(kind K1'room')
[Changed subject of sentences to K1'room']
[Changed object of sentences to K1'room']
Evaluated APL pwo as DESCRIPTION_TY(kind K1'room')
[Changed subject of sentences to K2'thing']
[Changed object of sentences to K2'thing']
Evaluated APL pwo as DESCRIPTION_TY(kind K2'thing')
Evaluated APL pwo as DESCRIPTION_TY(kind K2'thing')
Evaluated APL pwo as DESCRIPTION_TY(kind K2'thing')
Evaluated APL pwo as DESCRIPTION_TY(kind K2'thing')
Evaluated APL pwo as DESCRIPTION_TY(kind K2'thing')
Evaluated APL pwo as DESCRIPTION_TY(kind K2'thing')
Forming implication for K2'thing': type DESCRIPTION_TY(properties:Y'scenery' - CONDITION_TY -> p28_scenery) implies
          ADJECTIVE_NT 008e91d4->008e58d8  <fixed in place>
Evaluated APL pwo as DESCRIPTION_TY(kind K2'thing')
Evaluated APL pwo as DESCRIPTION_TY(kind K2'thing')
Evaluated APL pwo as DESCRIPTION_TY(kind K4'door')
[Changed subject of sentences to K4'door']
[Changed object of sentences to K4'door']
Evaluated APL pwo as DESCRIPTION_TY(kind K4'door')
Evaluated APL pwo as DESCRIPTION_TY(kind K4'door')
Evaluated APL pwo as DESCRIPTION_TY(kind K4'door')
Evaluated APL pwo as DESCRIPTION_TY(kind K4'door')
Evaluated APL pwo as DESCRIPTION_TY(kind K4'door')
Evaluated APL pwo as DESCRIPTION_TY(kind K4'door')
Evaluated APL pwo as DESCRIPTION_TY(kind K5'container')
[Changed subject of sentences to K5'container']
[Changed object of sentences to K5'container']
Evaluated APL pwo as DESCRIPTION_TY(kind K5'container')
Evaluated APL pwo as DESCRIPTION_TY(kind K5'container')
Evaluated APL pwo as DESCRIPTION_TY(kind K5'container')
Evaluated APL pwo as DESCRIPTION_TY(kind K5'container')
[Changed subject of sentences to K10'player's holdall']
[Changed object of sentences to K10'player's holdall']
Evaluated APL pwo as DESCRIPTION_TY(kind K10'player's holdall')
Evaluated APL pwo as DESCRIPTION_TY(kind K10'player's holdall')
Evaluated APL pwo as DESCRIPTION_TY(kind K6'supporter')
[Changed subject of sentences to K6'supporter']
[Changed object of sentences to K6'supporter']
Evaluated APL pwo as DESCRIPTION_TY(kind K6'supporter')
Evaluated APL pwo as DESCRIPTION_TY(kind K6'supporter')
[Changed subject of sentences to K11'device']
[Changed object of sentences to K11'device']
Evaluated APL pwo as DESCRIPTION_TY(kind K11'device')
Evaluated APL pwo as DESCRIPTION_TY(kind K11'device')
[Changed subject of sentences to K3'direction']
[Changed object of sentences to K3'direction']
Evaluated APL pwo as DESCRIPTION_TY(kind K3'direction')
Setting kind of O12'north' to K3'direction'
Setting kind of O13'northeast' to K3'direction'
Setting kind of O14'northwest' to K3'direction'
Setting kind of O15'south' to K3'direction'
Setting kind of O16'southeast' to K3'direction'
Setting kind of O17'southwest' to K3'direction'
Setting kind of O18'east' to K3'direction'
Setting kind of O19'west' to K3'direction'
Setting kind of O20'up' to K3'direction'
Setting kind of O21'down' to K3'direction'
Setting kind of O22'inside' to K3'direction'
Setting kind of O23'outside' to K3'direction'
Evaluated APL pwo as DESCRIPTION_TY(kind K8'person')
[Changed subject of sentences to K8'person']
[Changed object of sentences to K8'person']
Evaluated APL pwo as DESCRIPTION_TY(kind K8'person')
[Changed subject of sentences to K24'animal']
[Changed object of sentences to K24'animal']
[Changed subject of sentences to K25'man']
[Changed object of sentences to K25'man']
Evaluated APL pwo as DESCRIPTION_TY(kind K25'man')
Evaluated APL pwo as DESCRIPTION_TY(kind K25'man')
[Changed subject of sentences to K26'woman']
[Changed object of sentences to K26'woman']
Evaluated APL pwo as DESCRIPTION_TY(kind K26'woman')
Evaluated APL pwo as DESCRIPTION_TY(kind K8'person')
[Changed subject of sentences to K8'person']
[Changed object of sentences to K8'person']
Evaluated APL pwo as DESCRIPTION_TY(kind K26'woman')
[Changed subject of sentences to K26'woman']
[Changed object of sentences to K26'woman']
Evaluated APL pwo as DESCRIPTION_TY(kind K25'man')
[Changed subject of sentences to K25'man']
[Changed object of sentences to K25'man']
[Changed subject of sentences to K27'player-character']
[Changed object of sentences to K27'player-character']
Setting kind of O29'yourself' to K27'player-character'
[Changed subject of sentences to O29'yourself']
[Changed object of sentences to O29'yourself']
[Changed subject of sentences to K30'vehicle']
[Changed object of sentences to K30'vehicle']
Evaluated APL pwo as DESCRIPTION_TY(kind K30'vehicle')
Evaluated APL pwo as DESCRIPTION_TY(kind K30'vehicle')
Evaluated APL pwo as DESCRIPTION_TY(kind K7'backdrop')
[Changed subject of sentences to K7'backdrop']
[Changed object of sentences to K7'backdrop']
Evaluated APL pwo as DESCRIPTION_TY(kind K7'backdrop')
Created property: p56_score_for_visiting
Created property: p57_score
Created property: p58_worn
Forming implication for K2'thing': type DESCRIPTION_TY(properties:Y'locked' - CONDITION_TY/~'unlocked' -> locked) implies
          ADJECTIVE_NT 00ad5ac0->00accde8  <lockable>
Created non-library quantity: Quantity Q33_actor believed variable 'actor' = VALUE_TY/OBJECT_TY(<null>) <K8'person'>

New scene connector: cw*=the game is in progress, sw*=the entire game, en*=, oen*=
A new connector for 'the entire game'/QUANTITY_TY(Q22_entire_game): end 0.
New scene connector: cw*=the game is over, sw*=the entire game, en*=, oen*=
A new connector for 'the entire game'/QUANTITY_TY(Q22_entire_game): end 1.
Created non-library quantity: Quantity Q34_thing_implicitly_taken believed variable 'thing implicitly taken' = VALUE_TY/OBJECT_TY(<null>)

Created action variable for Taking: thing implicitly taken (OBJECT_TY/<null>)
Created non-library quantity: Quantity Q35_room_gone_from believed variable 'room gone from' = VALUE_TY/OBJECT_TY(<null>) <K1'room'>

Created action variable for Going: room gone from (OBJECT_TY/K1'room')
Match with text: from + TS
Created non-library quantity: Quantity Q36_room_gone_to believed variable 'room gone to' = VALUE_TY/OBJECT_TY(<null>)

Created action variable for Going: room gone to (OBJECT_TY/<null>)
Match with text: to + TS
Created non-library quantity: Quantity Q37_door_gone_through believed variable 'door gone through' = VALUE_TY/OBJECT_TY(<null>)

Created action variable for Going: door gone through (OBJECT_TY/<null>)
Match with text: through + TS
Created non-library quantity: Quantity Q38_vehicle_gone_by believed variable 'vehicle gone by' = VALUE_TY/OBJECT_TY(<null>)

Created action variable for Going: vehicle gone by (OBJECT_TY/<null>)
Match with text: by + TS
Created non-library quantity: Quantity Q39_thing_gone_with believed variable 'thing gone with' = VALUE_TY/OBJECT_TY(<null>)

Created action variable for Going: thing gone with (OBJECT_TY/<null>)
Match with text: with + TS
Created non-library quantity: Quantity Q40_container_exited_from believed variable 'container exited from' = VALUE_TY/OBJECT_TY(<null>)

Created action variable for Exiting: container exited from (OBJECT_TY/<null>)
Created non-library quantity: Quantity Q41_room_describing_action believed variable 'room-describing action' = VALUE_TY/ACTION_NAME_TY

Created action variable for Looking: room-describing action (ACTION_NAME_TY/<null>)
Created non-library quantity: Quantity Q42_visibility_level_count believed variable 'visibility level count' = VALUE_TY/NUMBER_TY

Created action variable for Looking: visibility level count (NUMBER_TY/<null>)
Created non-library quantity: Quantity Q43_visibility_ceiling believed variable 'visibility ceiling' = VALUE_TY/OBJECT_TY(<null>)

Created action variable for Looking: visibility ceiling (OBJECT_TY/<null>)
[Changed subject of sentences to O29'yourself']
[Changed object of sentences to O29'yourself']
Setting kind of O96'hat' to K5'container'
[Changed subject of sentences to O96'hat']
[Changed object of sentences to O96'hat']
Setting kind of O97'pocketwatch' to K2'thing'
[Changed subject of sentences to O29'yourself']
[Changed object of sentences to O29'yourself']
Setting kind of O98'train schedule' to K2'thing'
Setting kind of O99'bluff' to K1'room'
[Changed subject of sentences to O99'bluff']
[Changed object of sentences to O99'bluff']


-----------------------------------------------------
Phase VIII ... Making the model world
-----------------------------------------------------

Considering implication of K2'thing' for O29'yourself':
DESCRIPTION_TY(properties:Y'locked' - CONDITION_TY/~'unlocked' -> locked) =>         ADJECTIVE_NT 00ad5ac0->00accde8  <lockable>
 (certainty 1; changed state 1)
FAIL: take no action
DESCRIPTION_TY(properties:Y'scenery' - CONDITION_TY -> scenery) =>         ADJECTIVE_NT 008e91d4->008e58d8  <fixed in place>
 (certainty 1; changed state 1)
FAIL: take no action
Considering implication of K2'thing' for O96'hat':
DESCRIPTION_TY(properties:Y'locked' - CONDITION_TY/~'unlocked' -> locked) =>         ADJECTIVE_NT 00ad5ac0->00accde8  <lockable>
 (certainty 1; changed state 1)
FAIL: take no action
DESCRIPTION_TY(properties:Y'scenery' - CONDITION_TY -> scenery) =>         ADJECTIVE_NT 008e91d4->008e58d8  <fixed in place>
 (certainty 1; changed state 1)
IRRELEVANT: property already settled
Considering implication of K2'thing' for O97'pocketwatch':
DESCRIPTION_TY(properties:Y'locked' - CONDITION_TY/~'unlocked' -> locked) =>         ADJECTIVE_NT 00ad5ac0->00accde8  <lockable>
 (certainty 1; changed state 1)
FAIL: take no action
DESCRIPTION_TY(properties:Y'scenery' - CONDITION_TY -> scenery) =>         ADJECTIVE_NT 008e91d4->008e58d8  <fixed in place>
 (certainty 1; changed state 1)
FAIL: take no action
Considering implication of K2'thing' for O98'train schedule':
DESCRIPTION_TY(properties:Y'locked' - CONDITION_TY/~'unlocked' -> locked) =>         ADJECTIVE_NT 00ad5ac0->00accde8  <lockable>
 (certainty 1; changed state 1)
FAIL: take no action
DESCRIPTION_TY(properties:Y'scenery' - CONDITION_TY -> scenery) =>         ADJECTIVE_NT 008e91d4->008e58d8  <fixed in place>
 (certainty 1; changed state 1)
FAIL: take no action
K1'room' has creator text <room>
Word 908 <room> ex <room>
K2'thing' has creator text <thing>
Word 914 <thing> ex <thing>
K3'direction' has creator text <direction>
Word 920 <direction> ex <direction>
K4'door' has creator text <door>
Word 926 <door> ex <door>
K5'container' has creator text <container>
Word 934 <container> ex <container>
K6'supporter' has creator text <supporter>
Word 942 <supporter> ex <supporter>
K7'backdrop' has creator text <backdrop>
Word 950 <backdrop> ex <backdrop>
K8'person' has creator text <person>
Word 972 <person> ex <person>
K9'region' has creator text <region>
Word 980 <region> ex <region>
K10'player's holdall' has creator text <player's holdall>
Word 1855 <player's> ex <player's>
Word 1856 <holdall> ex <holdall>
K11'device' has creator text <device>
Word 1941 <device> ex <device>
O12'north' has creator text <north>
Word 2046 <north> ex <north>
O13'northeast' has creator text <northeast>
Word 2063 <northeast> ex <northeast>
O14'northwest' has creator text <northwest>
Word 2080 <northwest> ex <northwest>
O15'south' has creator text <south>
Word 2097 <south> ex <south>
O16'southeast' has creator text <southeast>
Word 2114 <southeast> ex <southeast>
O17'southwest' has creator text <southwest>
Word 2131 <southwest> ex <southwest>
O18'east' has creator text <east>
Word 2148 <east> ex <east>
O19'west' has creator text <west>
Word 2165 <west> ex <west>
O20'up' has creator text <up>
Word 2182 <up> ex <up>
O21'down' has creator text <down>
Word 2199 <down> ex <down>
O22'inside' has creator text <inside>
Word 2216 <inside> ex <inside>
O23'outside' has creator text <outside>
Word 2233 <outside> ex <outside>
K24'animal' has creator text <animal>
Word 2574 <animal> ex <animal>
K25'man' has creator text <man>
Word 2604 <man> ex <man>
K26'woman' has creator text <woman>
Word 2633 <woman> ex <woman>
K27'player-character' has creator text <player-character>
Word 2697 <player-character> ex <player-character>
O29'yourself' has creator text <yourself>
Word 2739 <yourself> ex <yourself>
K30'vehicle' has creator text <vehicle>
Word 2761 <vehicle> ex <vehicle>
O96'hat' has creator text <hat>
Word 79 <hat> ex <hat>
O97'pocketwatch' has creator text <pocketwatch>
Word 139 <pocketwatch> ex <pocketwatch>
O98'train schedule' has creator text <train schedule>
Word 190 <train> ex <train>
Word 191 <schedule> ex <schedule>
O99'bluff' has creator text <bluff>
Word 232 <bluff> ex <bluff>
Obj K0 has progenitor <null>
Obj K1'room' has progenitor <null>
Obj K2'thing' has progenitor <null>
Obj K3'direction' has progenitor <null>
Obj K4'door' has progenitor <null>
Obj K5'container' has progenitor <null>
Obj K6'supporter' has progenitor <null>
Obj K7'backdrop' has progenitor <null>
Obj K8'person' has progenitor <null>
Obj K9'region' has progenitor <null>
Obj K10'player's holdall' has progenitor <null>
Obj K11'device' has progenitor <null>
Obj O12'north' has progenitor <null>
Obj O13'northeast' has progenitor <null>
Obj O14'northwest' has progenitor <null>
Obj O15'south' has progenitor <null>
Obj O16'southeast' has progenitor <null>
Obj O17'southwest' has progenitor <null>
Obj O18'east' has progenitor <null>
Obj O19'west' has progenitor <null>
Obj O20'up' has progenitor <null>
Obj O21'down' has progenitor <null>
Obj O22'inside' has progenitor <null>
Obj O23'outside' has progenitor <null>
Obj K24'animal' has progenitor <null>
Obj K25'man' has progenitor <null>
Obj K26'woman' has progenitor <null>
Obj K27'player-character' has progenitor <null>
Obj O29'yourself' has progenitor <null>
Obj K30'vehicle' has progenitor <null>
Obj O96'hat' has progenitor O29'yourself'
Obj O97'pocketwatch' has progenitor O29'yourself'
Obj O98'train schedule' has progenitor O29'yourself'
Obj O99'bluff' has progenitor <null>
Grafting O96'hat' to be child of O29'yourself'
Grafting O97'pocketwatch' to be child of O29'yourself'
Grafting O98'train schedule' to be child of O29'yourself'
K0
K1'room'
K2'thing'
K3'direction'
K4'door'
K5'container'
K6'supporter'
K7'backdrop'
K8'person'
K9'region'
K10'player's holdall'
K11'device'
O12'north'
O13'northeast'
O14'northwest'
O15'south'
O16'southeast'
O17'southwest'
O18'east'
O19'west'
O20'up'
O21'down'
O22'inside'
O23'outside'
K24'animal'
K25'man'
K26'woman'
K27'player-character'
O29'yourself'
  O96'hat'
  O97'pocketwatch'
  O98'train schedule'
K30'vehicle'
O99'bluff'


-----------------------------------------------------
Phase IX ... Tables and grammar
-----------------------------------------------------



-----------------------------------------------------
Phase X ... Phrases and rules
-----------------------------------------------------

Well carry out taking inventory matched the stem carry out taking inventory mlen 4
Well carry out taking inventory matched the stem carry out taking inventory mlen 4
Well carry out taking inventory matched the stem carry out taking inventory mlen 4
Well carry out looking matched the stem carry out looking mlen 3
Well carry out looking matched the stem carry out looking mlen 3
Well carry out looking matched the stem carry out looking mlen 3
Well carry out looking matched the stem carry out looking mlen 3
Well carry out examining matched the stem carry out examining mlen 3
Well carry out examining matched the stem carry out examining mlen 3
Well carry out examining matched the stem carry out examining mlen 3
Well carry out examining matched the stem carry out examining mlen 3
Well carry out examining matched the stem carry out examining mlen 3
Well carry out examining matched the stem carry out examining mlen 3
Well report searching a container matched the stem report searching mlen 2
Fragmenting matched stem to report
Well report searching a supporter matched the stem report searching mlen 2
Fragmenting matched stem to report
Well carry out time-checking matched the stem carry out time-checking mlen 3
register phrasal on <i6 parser asks for an implicit take>
register phrasal on <i6 parser is running multiple actions>
register phrasal on <a random chance of ( n - number ) in ( m - number ) succeeds>
register phrasal on <a random number between ( n - number ) and ( m - number )>
register phrasal on <a random number from ( n - number ) to ( m - number )>
register phrasal on <a random ( s - description )>
register phrasal on <abide by i6 gamepostroutine>
register phrasal on <abide by i6 gamepreroutine>
register phrasal on <abide by i6 location after>
register phrasal on <abide by i6 location before>
register phrasal on <abide by i6 object after>
register phrasal on <abide by i6 object before>
register phrasal on <abide by i6 orders property>
register phrasal on <abide by i6 react_after property>
register phrasal on <abide by i6 react_before property>
register phrasal on <abide by ( rl - a rule ) for ( o - object )>
register phrasal on <abide by ( rl - a rule )>
register phrasal on <accept the result of ( rl - a rule )>
register phrasal on <action requires a carried noun>
register phrasal on <action requires a carried second noun>
register phrasal on <action requires a touchable noun>
register phrasal on <action requires a touchable second noun>
register phrasal on <action requires light>
register phrasal on <award ( some - number ) point>
register phrasal on <award ( some - number ) points>
register phrasal on <back side of ( d - object )>
register phrasal on <begin the ( a - activity ) activity with ( o - object )>
register phrasal on <begin the ( a - activity ) activity>
register phrasal on <best route from ( r1 - object ) to ( r2 - object ) through ( rs - description )>
register phrasal on <best route from ( r1 - object ) to ( r2 - object )>
register phrasal on <blank out the whole row>
register phrasal on <calculate visibility ceiling at low level>
register phrasal on <carry out the ( a - activity ) activity with ( o - object )>
register phrasal on <carry out the ( a - activity ) activity>
register phrasal on <cause the action to take place>
register phrasal on <cause the description to take place>
register phrasal on <cause the listing to take place>
register phrasal on <change the player to ( o - an object )>
register phrasal on <change ( d - direction ) exit of ( r1 - room ) to ( r2 - room )>
register phrasal on <change ( tr - table-reference ) to ( w - value )>
register phrasal on <change ( p - property ) to ( w - value )>
register phrasal on <change ( gv - global variable ) to ( w - value )>
register phrasal on <change ( o - object ) to ( w - value )>
register phrasal on <change ( lv - existing variable ) to ( w - value )>
register phrasal on <change ( o - object ) to ( p - property )>
register phrasal on <choose a blank row in ( t - table-name )>
register phrasal on <choose a random row in ( t - table-name )>
register phrasal on <choose row ( n - number ) in ( t - table-name )>
register phrasal on <choose the/-- row with ( tc - table-column ) of ( w - value ) in ( t - table-name )>
register phrasal on <choose the row with ( tc - table-column ) of ( w - value ) in ( t - table-name )>
register phrasal on <choose row with ( tc - table-column ) of ( w - value ) in ( t - table-name )>
register phrasal on <common ancestor of ( o - an object ) with ( p - an object )>
register phrasal on <component parts core of ( x - an object )>
register phrasal on <consider ( rl - a rule ) for ( o - object )>
register phrasal on <consider ( rl - a rule )>
register phrasal on <continue the action>
register phrasal on <continue the activity>
register phrasal on <convert to request of ( x - object ) to perform ( an - action-name ) with ( y - object ) and ( z - object )>
register phrasal on <convert to ( an - an action-name ) on ( o - an object )>
register phrasal on <cut ( s - a snippet )>
register phrasal on <decide no>
register phrasal on <decide on ( something - value )>
register phrasal on <decide yes>
register phrasal on <decrease/decrement ( p - property ) by ( w - value )>
register phrasal on <decrease ( p - property ) by ( w - value )>
register phrasal on <decrement ( p - property ) by ( w - value )>
register phrasal on <decrease/decrement ( gv - global variable ) by ( w - value )>
register phrasal on <decrease ( gv - global variable ) by ( w - value )>
register phrasal on <decrement ( gv - global variable ) by ( w - value )>
register phrasal on <decrease/decrement ( tr - table-reference ) by ( w - value )>
register phrasal on <decrease ( tr - table-reference ) by ( w - value )>
register phrasal on <decrement ( tr - table-reference ) by ( w - value )>
register phrasal on <decrease/decrement ( lv - existing variable ) by ( w - value )>
register phrasal on <decrease ( lv - existing variable ) by ( w - value )>
register phrasal on <decrement ( lv - existing variable ) by ( w - value )>
register phrasal on <delete ( tr - table-reference )>
register phrasal on <describe locale for the darkness pseudo-room>
register phrasal on <describe locale for ( o - object )>
register phrasal on <describe main room area for ( o - object )>
register phrasal on <describe the locale of ( h - an object )>
register phrasal on <direction of ( d - door ) from ( r1 - room )>
register phrasal on <display the boxed quotation ( q - boxed-quotation )>
register phrasal on <display ( f - figure-name )>
register phrasal on <do nothing>
register phrasal on <dump z stack backtrace>
register phrasal on <else if ( c - condition )>
register phrasal on <else ( ph - phrase )>
register phrasal on <end any i6 parser implicit take>
register phrasal on <end the game in death>
register phrasal on <end the game in victory>
register phrasal on <end the game saying ( finale - text )>
register phrasal on <end the ( a - activity ) activity with ( o - object )>
register phrasal on <end the ( a - activity ) activity>
register phrasal on <first thing held by ( something - object )>
register phrasal on <follow ( rl - a rule ) for ( o - object )>
register phrasal on <follow ( rl - a rule )>
register phrasal on <front side of ( d - object )>
register phrasal on <game ended in death>
register phrasal on <game ended in victory>
register phrasal on <game is in progress>
register phrasal on <game is over>
register phrasal on <group ( os - description ) together as ( t - text )>
register phrasal on <group ( os - description ) together giving articles>
register phrasal on <group ( os - description ) together>
register phrasal on <handling ( a - activity ) activity with ( o - object )>
register phrasal on <handling ( a - activity ) activity>
register phrasal on <holder of ( something - object )>
register phrasal on <hours part of ( t - time )>
register phrasal on <if ( c - condition ) , ( ph - phrase )>
register phrasal on <if ( c - condition ) begin>
register phrasal on <if ( c - condition ) then ( ph - phrase )>
register phrasal on <ignore ( rl - a rule )>
register phrasal on <in darkness>
register phrasal on <in ( somewhere - an object )>
register phrasal on <increase/increment ( p - property ) by ( w - value )>
register phrasal on <increase ( p - property ) by ( w - value )>
register phrasal on <increment ( p - property ) by ( w - value )>
register phrasal on <increase/increment ( gv - global variable ) by ( w - value )>
register phrasal on <increase ( gv - global variable ) by ( w - value )>
register phrasal on <increment ( gv - global variable ) by ( w - value )>
register phrasal on <increase/increment ( tr - table-reference ) by ( w - value )>
register phrasal on <increase ( tr - table-reference ) by ( w - value )>
register phrasal on <increment ( tr - table-reference ) by ( w - value )>
register phrasal on <increase/increment ( lv - existing variable ) by ( w - value )>
register phrasal on <increase ( lv - existing variable ) by ( w - value )>
register phrasal on <increment ( lv - existing variable ) by ( w - value )>
register phrasal on <issue library message ( an - an action-name ) number ( n - a number ) for ( h - an object )>
register phrasal on <issue library message ( an - an action-name ) number ( n - a number )>
register phrasal on <issue the error ( message - string-of-text )>
register phrasal on <it does not>
register phrasal on <it does>
register phrasal on <it is after ( t2 - time )>
register phrasal on <it is before ( t2 - time )>
register phrasal on <let ( t - nonexisting variable ) be ( u - value )>
register phrasal on <let ( t - existing variable ) be ( u - value )>
register phrasal on <list the contents of ( o - an object )>
register phrasal on <location of ( o - object )>
register phrasal on <make no decision>
register phrasal on <mark the darkness pseudo-room as visited>
register phrasal on <minutes part of ( t - time )>
register phrasal on <move ( rl1 - a rule ) to after ( rl2 - a rule )>
register phrasal on <move ( rl1 - a rule ) to before ( rl2 - a rule )>
register phrasal on <move ( something - object ) to ( something else - object ) at object tree level>
register phrasal on <move ( something - object ) to ( something else - object )>
register phrasal on <next step via ( r - abstract-relation ) from ( o1 - object ) to ( o2 - object )>
register phrasal on <next thing held after ( something - object )>
register phrasal on <no>
register phrasal on <not-counting-parts holder of ( o - an object )>
register phrasal on <now ( cn - now-condition )>
register phrasal on <number of blank rows in ( t - table-name )>
register phrasal on <number of filled rows in ( t - table-name )>
register phrasal on <number of moves from ( r1 - object ) to ( r2 - object ) through ( rs - description )>
register phrasal on <number of moves from ( r1 - object ) to ( r2 - object )>
register phrasal on <number of rows in ( t - table-name )>
register phrasal on <number of steps via ( r - abstract-relation ) from ( o1 - object ) to ( o2 - object )>
register phrasal on <number of ( s - description )>
register phrasal on <omit contents in listing>
register phrasal on <other side of ( d - door ) from ( r1 - room )>
register phrasal on <otherwise if ( c - condition )>
register phrasal on <otherwise ( ph - phrase )>
register phrasal on <outcome of the rulebook>
register phrasal on <parser error is i beg your pardon>
register phrasal on <parser error is aren't holding that>
register phrasal on <parser error is can only do that to something animate>
register phrasal on <parser error is can only use multiple objects>
register phrasal on <parser error is can't see any such thing>
register phrasal on <parser error is can't see it at the moment>
register phrasal on <parser error is can't use multiple objects>
register phrasal on <parser error is didn't understand that number>
register phrasal on <parser error is didn't understand the way that finished>
register phrasal on <parser error is didn't understand>
register phrasal on <parser error is excepted something not included>
register phrasal on <parser error is not a verb i recognise>
register phrasal on <parser error is not enough of those available>
register phrasal on <parser error is not something you need to refer to>
register phrasal on <parser error is not sure what it refers to>
register phrasal on <parser error is nothing to do>
register phrasal on <parser error is only understood as far as>
register phrasal on <parser error is said too little>
register phrasal on <place ( o - an object ) in scope>
register phrasal on <player consents>
register phrasal on <produce a room description with going spacing conventions>
register phrasal on <random ( s - description )>
register phrasal on <reinstate ( rl - a rule )>
register phrasal on <reject the player's command>
register phrasal on <reject the result of ( rl - a rule )>
register phrasal on <remainder after dividing ( x - number ) by ( y - number )>
register phrasal on <remove ( something - object ) from play>
register phrasal on <repeat through ( t - table-name ) begin>
register phrasal on <repeat through ( t - table-name ) in reverse order begin>
register phrasal on <repeat through ( t - table-name ) in reverse ( tc - table-column ) order begin>
register phrasal on <repeat through ( t - table-name ) in ( tc - table-column ) order begin>
register phrasal on <repeat with ( loopvar - number variable ) running from ( v - number ) to ( w - number ) begin>
register phrasal on <repeat with ( loopvar - object variable ) running through ( os - description ) begin>
register phrasal on <replace ( s - a snippet ) with ( t - text )>
register phrasal on <restore the original ( rl1 - a rule )>
register phrasal on <result of the rule>
register phrasal on <resume the game>
register phrasal on <room ( d - direction ) from ( r1 - room )>
register phrasal on <room-or-door ( d - direction ) from ( r1 - room )>
register phrasal on <rule failed with result ( o - miscellaneous-value )>
register phrasal on <rule failed>
register phrasal on <rule fails with result ( o - a miscellaneous-value )>
register phrasal on <rule fails>
register phrasal on <rule succeeded with result ( o - miscellaneous-value )>
register phrasal on <rule succeeded>
register phrasal on <rule succeeds with result ( o - a miscellaneous-value )>
register phrasal on <rule succeeds>
register phrasal on <run scene change machinery>
register phrasal on <a ( something - object )>
register phrasal on <an ( something - object )>
register phrasal on <the list of ( os - description )>
register phrasal on <the ( something - object )>
register phrasal on <a list of ( os - description )>
register phrasal on <a ( something - object )>
register phrasal on <an ( something - object )>
register phrasal on <apostrophe/'>
register phrasal on <apostrophe>
register phrasal on <'>
register phrasal on <banner text>
register phrasal on <bold type>
register phrasal on <bracket>
register phrasal on <close bracket>
register phrasal on <command clarification break>
register phrasal on <conditional paragraph break>
register phrasal on <contents of ( o - an object )>
register phrasal on <end if>
register phrasal on <fixed letter spacing>
register phrasal on <if ( c - condition )>
register phrasal on <is-are a list of ( os - description )>
register phrasal on <is-are list of ( os - description )>
register phrasal on <is-are the list of ( os - description )>
register phrasal on <italic type>
register phrasal on <line break>
register phrasal on <list of extension credits>
register phrasal on <list of ( os - description )>
register phrasal on <no line break>
register phrasal on <otherwise if ( c - condition )>
register phrasal on <otherwise>
register phrasal on <paragraph break>
register phrasal on <possessive for ( x - a person )>
register phrasal on <quotation mark>
register phrasal on <roman type>
register phrasal on <run paragraph on with special look spacing>
register phrasal on <run paragraph on>
register phrasal on <s>
register phrasal on <short name of the darkness pseudo-room>
register phrasal on <the contents of ( o - an object )>
register phrasal on <the list of ( os - description )>
register phrasal on <the player's surroundings>
register phrasal on <the ( something - number ) in words>
register phrasal on <the ( something - object )>
register phrasal on <variable letter spacing>
register phrasal on <( something - time ) in words>
register phrasal on <( something - number ) in words>
register phrasal on <( something - string-of-text )>
register phrasal on <( something - text-routine )>
register phrasal on <( something - number )>
register phrasal on <( something - time )>
register phrasal on <( something - unicode-character )>
register phrasal on <( something - snippet )>
register phrasal on <( something - object )>
register phrasal on <( something - table-name )>
register phrasal on <( something - rule )>
register phrasal on <( something - rulebook-outcome )>
register phrasal on <seed the random-number generator with ( n - number )>
register phrasal on <set pronouns from possessions of the player>
register phrasal on <silently try ( doing something - action )>
register phrasal on <sort ( t - table-name ) in random order>
register phrasal on <sort ( t - table-name ) in reverse ( tc - table-column ) order>
register phrasal on <sort ( t - table-name ) in ( tc - table-column ) order>
register phrasal on <stop the action with library message ( an - an action-name ) number ( n - a number ) for ( h - an object )>
register phrasal on <stop the action with library message ( an - an action-name ) number ( n - a number )>
register phrasal on <stop the action>
register phrasal on <stop>
register phrasal on <substitute ( rl1 - a rule ) for ( rl2 - a rule )>
register phrasal on <surreptitiously move floating objects>
register phrasal on <surreptitiously move ( something - object ) to ( something else - object )>
register phrasal on <surreptitiously reckon dark in move from ( r - room ) to ( s - room )>
register phrasal on <there is no ( tr - table-reference )>
register phrasal on <there is ( tr - table-reference )>
register phrasal on <time since ( sc - scene ) began>
register phrasal on <time since ( sc - scene ) ended>
register phrasal on <time when ( sc - scene ) began>
register phrasal on <time when ( sc - scene ) ended>
register phrasal on <total ( p - property ) of ( s - description )>
register phrasal on <try silently ( doing something - action )>
register phrasal on <try ( doing something - action )>
register phrasal on <using the/-- ( uo - use-option )>
register phrasal on <using the ( uo - use-option )>
register phrasal on <using ( uo - use-option )>
register phrasal on <visibility ceiling calculated>
register phrasal on <visibility ceiling count calculated>
register phrasal on <visibility-holder of ( o - object )>
register phrasal on <while ( c - condition ) , ( ph - phrase )>
register phrasal on <while ( c - condition ) begin>
register phrasal on <while ( c - condition ) repeatedly ( ph - phrase )>
register phrasal on <world model does not include ( o - an object )>
register phrasal on <world model includes ( o - an object )>
register phrasal on <yes>
register phrasal on <( x - number ) * ( y - number )>
register phrasal on <( x - number ) + ( y - number )>
register phrasal on <( x - number ) - ( y - number )>
register phrasal on <( x - number ) / ( y - number )>
register phrasal on <( a - activity ) activity is going on>
register phrasal on <( t - time ) after ( t2 - time )>
register phrasal on <( r - rule ) at ( t - time )>
register phrasal on <( t - time ) before ( t2 - time )>
register phrasal on <( x - number ) divided by ( y - number )>
register phrasal on <( s - a snippet ) does not include ( t - a topic )>
register phrasal on <( s - a snippet ) does not match ( t - a topic )>
register phrasal on <( o - object ) goes undescribed by source text>
register phrasal on <( sc - scene ) has ended>
register phrasal on <( sc - scene ) has happened>
register phrasal on <( sc - scene ) has not ended>
register phrasal on <( sc - scene ) has not happened>
register phrasal on <( n - number ) hours>
register phrasal on <( r - rule ) in ( t - time ) from now>
register phrasal on <( r - rule ) in ( t - number ) turn from now>
register phrasal on <( r - rule ) in ( t - number ) turns from now>
register phrasal on <( s - a snippet ) includes ( t - a topic )>
register phrasal on <( t - time ) is after ( t2 - time )>
register phrasal on <( t - time ) is before ( t2 - time )>
register phrasal on <( sc - scene ) is happening>
register phrasal on <( o - object ) is inaccessible>
register phrasal on <( sc - scene ) is not happening>
register phrasal on <( s - a snippet ) matches ( t - a topic )>
register phrasal on <( x - number ) minus ( y - number )>
register phrasal on <( n - number ) minutes>
register phrasal on <( x - number ) multiplied by ( y - number )>
register phrasal on <( x - number ) plus ( y - number )>
register phrasal on <( o - object ) provides the property ( p - property )>
register phrasal on <( x - number ) times ( y - number )>
register phrasal on <( t - time ) to the nearest ( t2 - time )>
Chief AN for taking something which is carried by the player is Taking
[1] subject NP: x such that: [ K2'thing'(x) ]
[1] object NP: QUANTITY_TY(player) conjunction: [ K2'thing'(x) ]
[1] VP conjunction: [ K2'thing'(x) ^ is-carried-by(x,QUANTITY_TY(player)) ]

result of sentence conversion for <something which is carried by the player>:
basic representation:               [ K2'thing'(x) ^ is-carried-by(x,QUANTITY_TY(player)) ]
simp_make_kinds_explicit:           [ K2'thing'(x) ^ is-carried-by(x,QUANTITY_TY(player)) ]
simp_turn_right_way_round:          [ K2'thing'(x) ^ carries(QUANTITY_TY(player),x) ]
simp_reduce_predicates:             [ K2'thing'(x) ^ is(QUANTITY_TY(player),I7_CarriedBy(x)) ]

An actor!
Chief AN for taking inventory is Taking inventory
Chief AN for taking is Taking
An actor!
Chief AN for taking is Taking
An actor!
Chief AN for taking is Taking
An actor!
Chief AN for taking is Taking
An actor!
Chief AN for taking is Taking
An actor!
Chief AN for taking is Taking
An actor!
Chief AN for taking is Taking
An actor!
Chief AN for taking is Taking
An actor!
Chief AN for taking is Taking
An actor!
Chief AN for taking is Taking
An actor!
Chief AN for taking is Taking
An actor!
Chief AN for taking is Taking
An actor!
Chief AN for taking is Taking
An actor!
Chief AN for taking is Taking
An actor!
Chief AN for taking is Taking
An actor!
Chief AN for removing something from is Removing it from
An actor!
Chief AN for removing something from is Removing it from
An actor!
Chief AN for removing something from is Removing it from
An actor!
Chief AN for dropping is Dropping
An actor!
Chief AN for dropping is Dropping
An actor!
Chief AN for dropping is Dropping
An actor!
Chief AN for dropping is Dropping
An actor!
Chief AN for dropping is Dropping
An actor!
Chief AN for dropping is Dropping
An actor!
Chief AN for dropping is Dropping
An actor!
Chief AN for putting something on is Putting it on
An actor!
Chief AN for putting something on is Putting it on
An actor!
Chief AN for putting something on is Putting it on
An actor!
Chief AN for putting something on is Putting it on
An actor!
Chief AN for putting something on is Putting it on
An actor!
Chief AN for putting something on is Putting it on
An actor!
Chief AN for putting something on is Putting it on
An actor!
Chief AN for putting something on is Putting it on
An actor!
Chief AN for putting something on is Putting it on
An actor!
Chief AN for putting something on is Putting it on
An actor!
Chief AN for inserting something into is Inserting it into
An actor!
Chief AN for inserting something into is Inserting it into
An actor!
Chief AN for inserting something into is Inserting it into
An actor!
Chief AN for inserting something into is Inserting it into
An actor!
Chief AN for inserting something into is Inserting it into
An actor!
Chief AN for inserting something into is Inserting it into
An actor!
Chief AN for inserting something into is Inserting it into
An actor!
Chief AN for inserting something into is Inserting it into
An actor!
Chief AN for inserting something into is Inserting it into
An actor!
Chief AN for inserting something into is Inserting it into
An actor!
Chief AN for eating is Eating
An actor!
Chief AN for eating is Eating
An actor!
Chief AN for eating is Eating
An actor!
Chief AN for eating is Eating
Chief AN for going is Going
An actor!
Chief AN for going is Going
An actor!
Chief AN for going is Going
An actor!
Chief AN for going is Going
An actor!
Chief AN for going is Going
An actor!
Chief AN for going is Going
An actor!
Chief AN for going is Going
An actor!
Chief AN for going is Going
An actor!
Chief AN for going is Going
An actor!
Chief AN for going is Going
An actor!
Chief AN for entering is Entering
An actor!
Chief AN for entering is Entering
An actor!
Chief AN for entering is Entering
An actor!
Chief AN for entering is Entering
An actor!
Chief AN for entering is Entering
An actor!
Chief AN for entering is Entering
An actor!
Chief AN for entering is Entering
An actor!
Chief AN for entering is Entering
An actor!
Chief AN for entering is Entering
An actor!
Chief AN for entering is Entering
Chief AN for exiting is Exiting
An actor!
Chief AN for exiting is Exiting
An actor!
Chief AN for exiting is Exiting
An actor!
Chief AN for exiting is Exiting
An actor!
Chief AN for exiting is Exiting
An actor!
Chief AN for exiting is Exiting
An actor!
Chief AN for exiting is Exiting
An actor!
Chief AN for exiting is Exiting
An actor!
Chief AN for getting off is Getting off
An actor!
Chief AN for getting off is Getting off
An actor!
Chief AN for getting off is Getting off
An actor!
Chief AN for getting off is Getting off
Chief AN for looking is Looking
An actor!
Chief AN for looking is Looking
An actor!
Chief AN for examining is Examining
An actor!
Chief AN for looking under is Looking under
An actor!
Chief AN for looking under is Looking under
An actor!
Chief AN for searching is Searching
An actor!
Chief AN for searching is Searching
Chief AN for searching a container is Searching
Chief AN for searching a supporter is Searching
An actor!
Chief AN for searching is Searching
An actor!
Chief AN for consulting something about is Consulting it about
An actor!
Chief AN for locking something with is Locking it with
An actor!
Chief AN for locking something with is Locking it with
An actor!
Chief AN for locking something with is Locking it with
An actor!
Chief AN for locking something with is Locking it with
An actor!
Chief AN for locking something with is Locking it with
An actor!
Chief AN for locking something with is Locking it with
An actor!
Chief AN for unlocking something with is Unlocking it with
An actor!
Chief AN for unlocking something with is Unlocking it with
An actor!
Chief AN for unlocking something with is Unlocking it with
An actor!
Chief AN for unlocking something with is Unlocking it with
An actor!
Chief AN for unlocking something with is Unlocking it with
An actor!
Chief AN for switching on is Switching on
An actor!
Chief AN for switching on is Switching on
An actor!
Chief AN for switching on is Switching on
An actor!
Chief AN for switching on is Switching on
An actor!
Chief AN for switching off is Switching off
An actor!
Chief AN for switching off is Switching off
An actor!
Chief AN for switching off is Switching off
An actor!
Chief AN for switching off is Switching off
An actor!
Chief AN for opening is Opening
An actor!
Chief AN for opening is Opening
An actor!
Chief AN for opening is Opening
An actor!
Chief AN for opening is Opening
An actor!
Chief AN for opening is Opening
An actor!
Chief AN for opening is Opening
An actor!
Chief AN for closing is Closing
An actor!
Chief AN for closing is Closing
An actor!
Chief AN for closing is Closing
An actor!
Chief AN for closing is Closing
An actor!
Chief AN for wearing is Wearing
An actor!
Chief AN for wearing is Wearing
An actor!
Chief AN for wearing is Wearing
An actor!
Chief AN for wearing is Wearing
An actor!
Chief AN for wearing is Wearing
An actor!
Chief AN for taking off is Taking off
An actor!
Chief AN for taking off is Taking off
An actor!
Chief AN for taking off is Taking off
An actor!
Chief AN for giving something to is Giving it to
An actor!
Chief AN for giving something to is Giving it to
An actor!
Chief AN for giving something to is Giving it to
An actor!
Chief AN for giving something to is Giving it to
An actor!
Chief AN for giving something to is Giving it to
An actor!
Chief AN for giving something to is Giving it to
An actor!
Chief AN for showing something to is Showing it to
An actor!
Chief AN for showing something to is Showing it to
An actor!
Chief AN for showing something to is Showing it to
An actor!
Chief AN for waking is Waking
An actor!
Chief AN for throwing something at is Throwing it at
An actor!
Chief AN for throwing something at is Throwing it at
An actor!
Chief AN for throwing something at is Throwing it at
An actor!
Chief AN for attacking is Attacking
An actor!
Chief AN for kissing is Kissing
An actor!
Chief AN for kissing is Kissing
An actor!
Chief AN for answering something that is Answering it that
An actor!
Chief AN for telling something about is Telling it about
An actor!
Chief AN for telling something about is Telling it about
An actor!
Chief AN for asking something about is Asking it about
An actor!
Chief AN for asking something for is Asking it for
An actor!
Chief AN for asking something for is Asking it for
An actor!
Chief AN for waiting is Waiting
An actor!
Chief AN for touching is Touching
An actor!
Chief AN for touching is Touching
An actor!
Chief AN for touching is Touching
An actor!
Chief AN for waving is Waving
An actor!
Chief AN for waving is Waving
An actor!
Chief AN for pulling is Pulling
An actor!
Chief AN for pulling is Pulling
An actor!
Chief AN for pulling is Pulling
An actor!
Chief AN for pulling is Pulling
An actor!
Chief AN for pushing something is Pushing
An actor!
Chief AN for pushing something is Pushing
An actor!
Chief AN for pushing something is Pushing
An actor!
Chief AN for pushing something is Pushing
An actor!
Chief AN for turning is Turning
An actor!
Chief AN for turning is Turning
An actor!
Chief AN for turning is Turning
An actor!
Chief AN for turning is Turning
An actor!
Chief AN for pushing something to is Pushing it to
An actor!
Chief AN for squeezing is Squeezing
An actor!
Chief AN for squeezing is Squeezing
An actor!
Chief AN for saying yes is Saying yes
An actor!
Chief AN for saying no is Saying no
An actor!
Chief AN for burning is Burning
An actor!
Chief AN for waking up is Waking up
An actor!
Chief AN for thinking is Thinking
An actor!
Chief AN for smelling is Smelling
An actor!
Chief AN for listening is Listening to
An actor!
Chief AN for tasting is Tasting
An actor!
Chief AN for cutting is Cutting
An actor!
Chief AN for jumping is Jumping
An actor!
Chief AN for tying is Tying it to
An actor!
Chief AN for drinking is Drinking
An actor!
Chief AN for saying sorry is Saying sorry
An actor!
Chief AN for swearing obscenely is Swearing obscenely
An actor!
Chief AN for swearing mildly is Swearing mildly
An actor!
Chief AN for swinging is Swinging
An actor!
Chief AN for rubbing is Rubbing
An actor!
Chief AN for setting something to is Setting it to
An actor!
Chief AN for waving hands is Waving hands
An actor!
Chief AN for buying is Buying
An actor!
Chief AN for singing is Singing
An actor!
Chief AN for climbing is Climbing
An actor!
Chief AN for sleeping is Sleeping
Chief AN for smelling is Smelling
Chief AN for listening is Listening to
Chief AN for going is Going


-----------------------------------------------------
Phase XI ... Code generation
-----------------------------------------------------

Compiling initial value of quantity: Quantity Story believed variable 'story title' = VALUE_TY/TEXT_TY

From initial value '"InfoComp Game Entry"'/VALUE_TY/TEXT_TY
Compiling initial value of quantity: Quantity Q28_story_headline believed variable 'story headline' = VALUE_TY/TEXT_TY

From initial value '"A really cool game."'/VALUE_TY/TEXT_TY
Compiling initial value of quantity: Quantity Q27_story_author believed variable 'story author' = VALUE_TY/TEXT_TY

From initial value '"Ben Collins-Sussman and David Anderson"'/VALUE_TY/TEXT_TY
Compiling quantity declarations
Not declaring Quantity player believed variable 'player' = VALUE_TY/OBJECT_TY(<null>) <K27'player-character'>

Not declaring Quantity real_location believed variable 'location' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity score believed variable 'score' = VALUE_TY/NUMBER_TY

Not declaring Quantity MAX_SCORE believed variable 'maximum score' = VALUE_TY/NUMBER_TY

Not declaring Quantity turns believed variable 'turn count' = VALUE_TY/NUMBER_TY

Not declaring Quantity the_time believed variable 'time of day' = VALUE_TY/TIME_TY

Not declaring Quantity noun believed variable 'noun' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity second believed variable 'second noun' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity actor believed variable 'person asked' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity I7_action_deciding_rule believed variable 'reason the action failed' = VALUE_TY/RULE_TY

Not declaring Quantity self believed variable 'item described' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity actor believed variable 'person reaching' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity parameter_object believed variable 'container in question' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity I7_concealed_item believed variable 'particular possession' = VALUE_TY/OBJECT_TY(<null>) <K2'thing'>

Not declaring Quantity I7_command believed variable 'player's command' = VALUE_TY/SNIPPET_TY

Not declaring Quantity I7_match_snippet believed variable 'matched text' = VALUE_TY/SNIPPET_TY

Not declaring Quantity parsed_number believed variable 'number understood' = VALUE_TY/NUMBER_TY

Not declaring Quantity parsed_number believed variable 'time understood' = VALUE_TY/TIME_TY

Not declaring Quantity parsed_number believed variable 'topic understood' = VALUE_TY/SNIPPET_TY

Not declaring Quantity I7_prompt_text believed variable 'command prompt' = VALUE_TY/TEXT_TY

Not declaring Quantity I7_left_sl believed variable 'left hand status line' = VALUE_TY/TEXT_TY

Not declaring Quantity I7_right_sl believed variable 'right hand status line' = VALUE_TY/TEXT_TY

Declaring Quantity Q22_entire_game believed constant 'entire game' = VALUE_TY/SCENE_TY

Not declaring Quantity say__c believed variable 'say-parameter' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity nothing believed variable 'i6-nothing' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity move_pushing believed variable 'i6-pushdir item' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity Story believed variable 'story title' = VALUE_TY/TEXT_TY

Not declaring Quantity Q27_story_author believed variable 'story author' = VALUE_TY/TEXT_TY

Not declaring Quantity Q28_story_headline believed variable 'story headline' = VALUE_TY/TEXT_TY

Not declaring Quantity Q29_story_genre believed variable 'story genre' = VALUE_TY/TEXT_TY

Not declaring Quantity Q30_story_description believed variable 'story description' = VALUE_TY/TEXT_TY

Not declaring Quantity Q31_release_number believed variable 'release number' = VALUE_TY/NUMBER_TY

Not declaring Quantity Q32_story_creation_year believed variable 'story creation year' = VALUE_TY/NUMBER_TY

Not declaring Quantity Q33_actor believed variable 'actor' = VALUE_TY/OBJECT_TY(<null>) <K8'person'>

Not declaring Quantity Q34_thing_implicitly_taken believed variable 'thing implicitly taken' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity Q35_room_gone_from believed variable 'room gone from' = VALUE_TY/OBJECT_TY(<null>) <K1'room'>

Not declaring Quantity Q36_room_gone_to believed variable 'room gone to' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity Q37_door_gone_through believed variable 'door gone through' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity Q38_vehicle_gone_by believed variable 'vehicle gone by' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity Q39_thing_gone_with believed variable 'thing gone with' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity Q40_container_exited_from believed variable 'container exited from' = VALUE_TY/OBJECT_TY(<null>)

Not declaring Quantity Q41_room_describing_action believed variable 'room-describing action' = VALUE_TY/ACTION_NAME_TY

Not declaring Quantity Q42_visibility_level_count believed variable 'visibility level count' = VALUE_TY/NUMBER_TY

Not declaring Quantity Q43_visibility_ceiling believed variable 'visibility ceiling' = VALUE_TY/OBJECT_TY(<null>)

Compiling initial value of quantity: Quantity Q27_story_author believed variable 'story author' = VALUE_TY/TEXT_TY

From initial value '"Ben Collins-Sussman and David Anderson"'/VALUE_TY/TEXT_TY
Compiling initial value of quantity: Quantity Q28_story_headline believed variable 'story headline' = VALUE_TY/TEXT_TY

From initial value '"A really cool game."'/VALUE_TY/TEXT_TY
Compiling initial value of quantity: Quantity Q29_story_genre believed variable 'story genre' = VALUE_TY/TEXT_TY

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/TEXT_TY
Compiling initial value of quantity: Quantity Q30_story_description believed variable 'story description' = VALUE_TY/TEXT_TY

From initial value '"Here is an introductory paragraph.  Make it clear that we're in rural Wyoming in 1870... just one year after the first transcontinental railway was completed, and 3 years after the invention of dynamite.  Dynamite is a new thing.  Player is an anti-hero, attempting to rob a train.
"'/VALUE_TY/TEXT_TY
Compiling initial value of quantity: Quantity Q31_release_number believed variable 'release number' = VALUE_TY/NUMBER_TY

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/NUMBER_TY
Compiling initial value of quantity: Quantity Q32_story_creation_year believed variable 'story creation year' = VALUE_TY/NUMBER_TY

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/NUMBER_TY
Compiling initial value of quantity: Quantity Q33_actor believed variable 'actor' = VALUE_TY/OBJECT_TY(<null>) <K8'person'>

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity Q34_thing_implicitly_taken believed variable 'thing implicitly taken' = VALUE_TY/OBJECT_TY(<null>)

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity Q35_room_gone_from believed variable 'room gone from' = VALUE_TY/OBJECT_TY(<null>) <K1'room'>

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity Q36_room_gone_to believed variable 'room gone to' = VALUE_TY/OBJECT_TY(<null>)

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity Q37_door_gone_through believed variable 'door gone through' = VALUE_TY/OBJECT_TY(<null>)

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity Q38_vehicle_gone_by believed variable 'vehicle gone by' = VALUE_TY/OBJECT_TY(<null>)

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity Q39_thing_gone_with believed variable 'thing gone with' = VALUE_TY/OBJECT_TY(<null>)

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity Q40_container_exited_from believed variable 'container exited from' = VALUE_TY/OBJECT_TY(<null>)

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity Q41_room_describing_action believed variable 'room-describing action' = VALUE_TY/ACTION_NAME_TY

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/ACTION_NAME_TY
Compiling initial value of quantity: Quantity Q42_visibility_level_count believed variable 'visibility level count' = VALUE_TY/NUMBER_TY

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/NUMBER_TY
Compiling initial value of quantity: Quantity Q43_visibility_ceiling believed variable 'visibility ceiling' = VALUE_TY/OBJECT_TY(<null>)

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)


==== Phase XI.1 ... Compiling the object tree ====

Compiling object definition for K0
Compiling object definition for K1'room'
Compiling object definition for K2'thing'
Compiling object definition for K3'direction'
Initialising: 'opposite' - VALUE_TY/OBJECT_TY(<null>) -> p10_opposite
Initialising: 'inform property' - VALUE_TY/TEXT_TY -> p11_inform_property
Initialising: 'inform object' - VALUE_TY/TEXT_TY -> p12_inform_object
Compiling object definition for K4'door'
Compiling object definition for K5'container'
Compiling object definition for K6'supporter'
Compiling object definition for K7'backdrop'
Compiling object definition for K8'person'
|PROPERTY_INF| - Likely (carrying capacity) - 100- literal:'100'/VALUE_TY/NUMBER_TYCompiling object definition for K9'region'
Compiling object definition for K10'player's holdall'
Compiling object definition for K11'device'
Compiling object definition for K24'animal'
Compiling object definition for K25'man'
Compiling object definition for K26'woman'
Compiling object definition for K27'player-character'
|PROPERTY_INF| - Likely (description) - "As good-looking as ever."- literal:'"As good-looking as ever."'/VALUE_TY/TEXT_TYCompiling object definition for K30'vehicle'
Compiling object definition for O12'north'
|PROPERTY_INF| - Certain (opposite) - south- 1:O15'south'Compiling object definition for O13'northeast'
|PROPERTY_INF| - Certain (opposite) - southwest- 1:O17'southwest'Compiling object definition for O14'northwest'
|PROPERTY_INF| - Certain (opposite) - southeast- 1:O16'southeast'Compiling object definition for O15'south'
|PROPERTY_INF| - Certain (opposite) - north- 1:O12'north'Compiling object definition for O16'southeast'
|PROPERTY_INF| - Certain (opposite) - northwest- 1:O14'northwest'Compiling object definition for O17'southwest'
|PROPERTY_INF| - Certain (opposite) - northeast- 1:O13'northeast'Compiling object definition for O18'east'
|PROPERTY_INF| - Certain (opposite) - west- 1:O19'west'Compiling object definition for O19'west'
|PROPERTY_INF| - Certain (opposite) - east- 1:O18'east'Compiling object definition for O20'up'
|PROPERTY_INF| - Certain (opposite) - down- 1:O21'down'Compiling object definition for O21'down'
|PROPERTY_INF| - Certain (opposite) - up- 1:O20'up'Compiling object definition for O22'inside'
|PROPERTY_INF| - Certain (opposite) - outside- 1:O23'outside'Compiling object definition for O23'outside'
|PROPERTY_INF| - Certain (opposite) - inside- 1:O22'inside'Compiling object definition for O29'yourself'
Object O29'yourself': wo->creator 1, wo->kind->creator 1, w = <yourself>
Object O29'yourself': wo->creator_plural 1, wo->kind->creator_plural 1, pw = <yourselfs>
Compiling object definition for O96'hat'
Object O96'hat': wo->creator 1, wo->kind->creator 1, w = <hat>
Object O96'hat': wo->creator_plural 1, wo->kind->creator_plural 1, pw = <hats>
|PROPERTY_INF| - Certain (description) - "A wide-brimmed hat to protect you from the sun, and to clearly advertise yourself as a denizen of the plains."- literal:'"A wide-brimmed hat to protect you from the sun, and to clearly advertise yourself as a denizen of the plains."'/VALUE_TY/TEXT_TY|PROPERTY_INF| - Certain (carrying capacity) - 1- literal:'1'/VALUE_TY/NUMBER_TYCompiling object definition for O97'pocketwatch'
Object O97'pocketwatch': wo->creator 1, wo->kind->creator 1, w = <pocketwatch>
Object O97'pocketwatch': wo->creator_plural 1, wo->kind->creator_plural 1, pw = <pocketwatchs>
|PROPERTY_INF| - Certain (description) - "It's a rusty wind-up timepiece, handed down from your uncle.  It currently reads [time of day]."- literal:'"It's a rusty wind-up timepiece, handed down from your uncle.  It currently reads [time of day]."'/VALUE_TY/TEXT_ROUTINE_TYCompiling object definition for O98'train schedule'
Object O98'train schedule': wo->creator 1, wo->kind->creator 1, w = <train schedule>
Object O98'train schedule': wo->creator_plural 1, wo->kind->creator_plural 1, pw = <train schedules>
|PROPERTY_INF| - Certain (description) - "blah blah"- literal:'"blah blah"'/VALUE_TY/TEXT_TYCompiling object definition for O99'bluff'
Object O99'bluff': wo->creator 1, wo->kind->creator 1, w = <bluff>
Object O99'bluff': wo->creator_plural 1, wo->kind->creator_plural 1, pw = <bluffs>
|PROPERTY_INF| - Certain (description) - "You're standing on a bluff, overlooking a combination of sun-blasted plains and craggy hills."- literal:'"You're standing on a bluff, overlooking a combination of sun-blasted plains and craggy hills."'/VALUE_TY/TEXT_TY

==== Phase XI.2 ... Compiling the tables ====



==== Phase XI.3 ... Compiling the phrases ====

[1] subject NP: QUANTITY_TY(Q34_thing_implicitly_taken) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q34_thing_implicitly_taken),QUANTITY_TY(noun)) ]

result of sentence conversion for <thing implicitly taken is the noun>:
basic representation:               [ is(QUANTITY_TY(Q34_thing_implicitly_taken),QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q39_thing_gone_with) such that: []
[1] object NP: QUANTITY_TY(move_pushing) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q39_thing_gone_with),QUANTITY_TY(move_pushing)) ]

result of sentence conversion for <thing gone with is the i6-pushdir item>:
basic representation:               [ is(QUANTITY_TY(Q39_thing_gone_with),QUANTITY_TY(move_pushing)) ]

[1] subject NP: QUANTITY_TY(Q35_room_gone_from) such that: []
[1] object NP: function['the location of the actor'/PHRASE_TY/TO_DECIDE_TY] conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q35_room_gone_from),function['the location of the actor'/PHRASE_TY/TO_DECIDE_TY]) ]

result of sentence conversion for <room gone from is the location of the actor>:
basic representation:               [ is(QUANTITY_TY(Q35_room_gone_from),function['the location of the actor'/PHRASE_TY/TO_DECIDE_TY]) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: x conjunction: [ called(x)='carriage' ^ K30'vehicle'(x) ^ enterable(x) ]
[1] VP conjunction: [ called(x)='carriage' ^ K30'vehicle'(x) ^ enterable(x) ^ is-in(QUANTITY_TY(Q33_actor),x) ]

result of sentence conversion for <actor is in an enterable vehicle ( called the carriage )>:
basic representation:               [ exists x: called(x)='carriage' ^ K30'vehicle'(x) ^ enterable(x) ^ is-in(QUANTITY_TY(Q33_actor),x) ]
simp_turn_right_way_round:          [ exists x: called(x)='carriage' ^ K30'vehicle'(x) ^ enterable(x) ^ contains(x,QUANTITY_TY(Q33_actor)) ]
simp_reduce_predicates:             [ exists x: called(x)='carriage' ^ K30'vehicle'(x) ^ enterable(x) ^ is(x,I7_InWhat(QUANTITY_TY(Q33_actor))) ]
simp_eliminate_redundant_variables: [ called(I7_InWhat(QUANTITY_TY(Q33_actor)))='carriage' ^ K30'vehicle'(I7_InWhat(QUANTITY_TY(Q33_actor))) ^ enterable(I7_InWhat(QUANTITY_TY(Q33_actor))) ]

[1] subject NP: QUANTITY_TY(Q38_vehicle_gone_by) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q38_vehicle_gone_by),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

result of sentence conversion for <vehicle gone by is the carriage>:
basic representation:               [ is(QUANTITY_TY(Q38_vehicle_gone_by),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K3'direction'(x) ]
[1] VP conjunction: [ K3'direction'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a direction>:
basic representation:               [ exists x: K3'direction'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K3'direction'(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K4'door'(x) ]
[1] VP conjunction: [ K4'door'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a door>:
basic representation:               [ exists x: K4'door'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K4'door'(QUANTITY_TY(noun)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_1;OBJECT_TY) such that: []
[1] object NP: x conjunction: [ K4'door'(x) ]
[1] VP conjunction: [ K4'door'(x) ^ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),x) ]

result of sentence conversion for <target is a door>:
basic representation:               [ exists x: K4'door'(x) ^ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),x) ]
simp_eliminate_redundant_variables: [ K4'door'(LOCAL_VARIABLE_TY(t_1;OBJECT_TY)) ]

[1] subject NP: QUANTITY_TY(Q37_door_gone_through) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_1;OBJECT_TY) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q37_door_gone_through),LOCAL_VARIABLE_TY(t_1;OBJECT_TY)) ]

result of sentence conversion for <door gone through is the target>:
basic representation:               [ is(QUANTITY_TY(Q37_door_gone_through),LOCAL_VARIABLE_TY(t_1;OBJECT_TY)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_1;OBJECT_TY) such that: []
[1] object NP: function['the other side of the target from the room gone from'/PHRASE_TY/TO_DECIDE_TY] conjunction: []
[1] VP conjunction: [ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),function['the other side of the target from the room gone from'/PHRASE_TY/TO_DECIDE_TY]) ]

result of sentence conversion for <target is the other side of the target from the room gone from>:
basic representation:               [ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),function['the other side of the target from the room gone from'/PHRASE_TY/TO_DECIDE_TY]) ]

[1] subject NP: QUANTITY_TY(Q36_room_gone_to) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_1;OBJECT_TY) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q36_room_gone_to),LOCAL_VARIABLE_TY(t_1;OBJECT_TY)) ]

result of sentence conversion for <room gone to is the target>:
basic representation:               [ is(QUANTITY_TY(Q36_room_gone_to),LOCAL_VARIABLE_TY(t_1;OBJECT_TY)) ]

[1] subject NP: QUANTITY_TY(Q42_visibility_level_count) such that: []
[1] object NP: function['the visibility ceiling count calculated'/PHRASE_TY/TO_DECIDE_TY] conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q42_visibility_level_count),function['the visibility ceiling count calculated'/PHRASE_TY/TO_DECIDE_TY]) ]

result of sentence conversion for <visibility level count is the visibility ceiling count calculated>:
basic representation:               [ is(QUANTITY_TY(Q42_visibility_level_count),function['the visibility ceiling count calculated'/PHRASE_TY/TO_DECIDE_TY]) ]

[1] subject NP: QUANTITY_TY(Q43_visibility_ceiling) such that: []
[1] object NP: function['the visibility ceiling calculated'/PHRASE_TY/TO_DECIDE_TY] conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q43_visibility_ceiling),function['the visibility ceiling calculated'/PHRASE_TY/TO_DECIDE_TY]) ]

result of sentence conversion for <visibility ceiling is the visibility ceiling calculated>:
basic representation:               [ is(QUANTITY_TY(Q43_visibility_ceiling),function['the visibility ceiling calculated'/PHRASE_TY/TO_DECIDE_TY]) ]

[1] subject NP: QUANTITY_TY(Q41_room_describing_action) such that: []
[1] object NP: VALUE_TY/ACTION_NAME_TY conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q41_room_describing_action),VALUE_TY/ACTION_NAME_TY) ]

result of sentence conversion for <room-describing action is the looking action>:
basic representation:               [ is(QUANTITY_TY(Q41_room_describing_action),VALUE_TY/ACTION_NAME_TY) ]

[1] subject NP: QUANTITY_TY(Q40_container_exited_from) such that: []
[1] object NP: function['the holder of the actor'/PHRASE_TY/TO_DECIDE_TY] conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q40_container_exited_from),function['the holder of the actor'/PHRASE_TY/TO_DECIDE_TY]) ]

result of sentence conversion for <container exited from is the holder of the actor>:
basic representation:               [ is(QUANTITY_TY(Q40_container_exited_from),function['the holder of the actor'/PHRASE_TY/TO_DECIDE_TY]) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: x conjunction: [ I7_mentioned(x) ]
[1] VP conjunction: [ I7_mentioned(x) ^ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),x) ]

result of sentence conversion for <item being printed is mentioned>:
basic representation:               [ exists x: I7_mentioned(x) ^ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),x) ]
simp_eliminate_redundant_variables: [ I7_mentioned(LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

[1] subject NP: QUANTITY_TY(I7_concealed_item) such that: []
[1] object NP: O96'hat' conjunction: []
[1] VP conjunction: [ is-in(QUANTITY_TY(I7_concealed_item),O96'hat') ]

result of sentence conversion for <particular possession is inside the hat>:
basic representation:               [ is-in(QUANTITY_TY(I7_concealed_item),O96'hat') ]
simp_turn_right_way_round:          [ contains(O96'hat',QUANTITY_TY(I7_concealed_item)) ]
simp_reduce_predicates:             [ is(O96'hat',I7_InWhat(QUANTITY_TY(I7_concealed_item))) ]

[1] subject NP: QUANTITY_TY(player) such that: []
[1] object NP: O96'hat' conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(player),O96'hat') ]

result of sentence conversion for <the player wears the hat>:
basic representation:               [ wears(QUANTITY_TY(player),O96'hat') ]
simp_reduce_predicates:             [ is(QUANTITY_TY(player),I7_WornBy(O96'hat')) ]

[1] subject NP: function['first thing held by the player'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: VALUE_TY/OBJECT_TY(<null>) conjunction: []
[1] VP conjunction: [ is(function['first thing held by the player'/PHRASE_TY/TO_DECIDE_TY],VALUE_TY/OBJECT_TY(<null>)) ]

result of sentence conversion for <first thing held by the player is nothing>:
basic representation:               [ is(function['first thing held by the player'/PHRASE_TY/TO_DECIDE_TY],VALUE_TY/OBJECT_TY(<null>)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]  ]

result of sentence conversion for <actor is not the player>:
basic representation:               [  NOT  [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]  ]

[1] subject NP: QUANTITY_TY(Q34_thing_implicitly_taken) such that: []
[2] subject NP: x such that: [ K2'thing'(x) ]
[2] object NP: QUANTITY_TY(Q33_actor) conjunction: [ K2'thing'(x) ]
[2] VP conjunction: [ K2'thing'(x) ^ is-carried-by(x,QUANTITY_TY(Q33_actor)) ]

result of sentence conversion for <a thing carried by the actor>:
basic representation:               [ K2'thing'(x) ^ is-carried-by(x,QUANTITY_TY(Q33_actor)) ]
simp_make_kinds_explicit:           [ K2'thing'(x) ^ is-carried-by(x,QUANTITY_TY(Q33_actor)) ]
simp_turn_right_way_round:          [ K2'thing'(x) ^ carries(QUANTITY_TY(Q33_actor),x) ]
simp_reduce_predicates:             [ K2'thing'(x) ^ is(QUANTITY_TY(Q33_actor),I7_CarriedBy(x)) ]

[1] object NP: x conjunction: [ K2'thing'(x) ^ is(QUANTITY_TY(Q33_actor),I7_CarriedBy(x)) ]
[1] VP conjunction: [ K2'thing'(x) ^ is(QUANTITY_TY(Q33_actor),I7_CarriedBy(x)) ^ is(QUANTITY_TY(Q34_thing_implicitly_taken),x) ]

result of sentence conversion for <thing implicitly taken is a thing carried by the actor>:
basic representation:               [ exists x: K2'thing'(x) ^ is(QUANTITY_TY(Q33_actor),I7_CarriedBy(x)) ^ is(QUANTITY_TY(Q34_thing_implicitly_taken),x) ]
simp_eliminate_redundant_variables: [ K2'thing'(QUANTITY_TY(Q34_thing_implicitly_taken)) ^ is(QUANTITY_TY(Q33_actor),I7_CarriedBy(QUANTITY_TY(Q34_thing_implicitly_taken))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is the noun>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K8'person'(x) ]
[1] VP conjunction: [ K8'person'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a person>:
basic representation:               [ exists x: K8'person'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K8'person'(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ called(x)='whole' ^ K2'thing'(x) ]
[1] VP conjunction: [ called(x)='whole' ^ K2'thing'(x) ^ is-part-of(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is part of something ( called the whole )>:
basic representation:               [ exists x: called(x)='whole' ^ K2'thing'(x) ^ is-part-of(QUANTITY_TY(noun),x) ]
simp_make_kinds_explicit:           [ exists x: called(x)='whole' ^ K2'thing'(x) ^ is-part-of(QUANTITY_TY(noun),x) ]
simp_turn_right_way_round:          [ exists x: called(x)='whole' ^ K2'thing'(x) ^ incorporates(x,QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ exists x: called(x)='whole' ^ K2'thing'(x) ^ is(x,(QUANTITY_TY(noun).component_parent)) ]
simp_eliminate_redundant_variables: [ called((QUANTITY_TY(noun).component_parent))='whole' ^ K2'thing'((QUANTITY_TY(noun).component_parent)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_1;OBJECT_TY) such that: []
[1] object NP: VALUE_TY/OBJECT_TY(<null>) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),VALUE_TY/OBJECT_TY(<null>)) ]  ]

result of sentence conversion for <h is not nothing>:
basic representation:               [  NOT  [ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),VALUE_TY/OBJECT_TY(<null>)) ]  ]

[1] subject NP: LOCAL_VARIABLE_TY(t_1;OBJECT_TY) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]  ]

result of sentence conversion for <h is not the local ceiling>:
basic representation:               [  NOT  [ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]  ]

[1] subject NP: LOCAL_VARIABLE_TY(t_1;OBJECT_TY) such that: []
[1] object NP: x conjunction: [ K8'person'(x) ]
[1] VP conjunction: [ K8'person'(x) ^ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),x) ]

result of sentence conversion for <h is a person>:
basic representation:               [ exists x: K8'person'(x) ^ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),x) ]
simp_eliminate_redundant_variables: [ K8'person'(LOCAL_VARIABLE_TY(t_1;OBJECT_TY)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),QUANTITY_TY(noun)) ]

result of sentence conversion for <local ceiling is the noun>:
basic representation:               [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ carries(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is carrying the noun>:
basic representation:               [ carries(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_CarriedBy(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is wearing the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ scenery(x) ]
[1] VP conjunction: [ scenery(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is scenery>:
basic representation:               [ exists x: scenery(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ scenery(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ static(x) ]
[1] VP conjunction: [ static(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is fixed in place>:
basic representation:               [ exists x: static(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ static(QUANTITY_TY(noun)) ]

[2] subject NP: x such that: [ K2'thing'(x) ]
[2] object NP: QUANTITY_TY(Q33_actor) conjunction: [ K2'thing'(x) ]
[2] VP conjunction: [ K2'thing'(x) ^ is-carried-by(x,QUANTITY_TY(Q33_actor)) ]

result of sentence conversion for <things carried by the actor>:
basic representation:               [ K2'thing'(x) ^ is-carried-by(x,QUANTITY_TY(Q33_actor)) ]
simp_make_kinds_explicit:           [ K2'thing'(x) ^ is-carried-by(x,QUANTITY_TY(Q33_actor)) ]
simp_turn_right_way_round:          [ K2'thing'(x) ^ carries(QUANTITY_TY(Q33_actor),x) ]
simp_reduce_predicates:             [ K2'thing'(x) ^ is(QUANTITY_TY(Q33_actor),I7_CarriedBy(x)) ]

[1] subject NP: function['number of things carried by the actor'/PHRASE_TY/TO_DECIDE_TY] such that: []
PROPERTY_OF_TY
    1: PROPERTY_TY(properties:P'carrying capacity' - VALUE_TY/NUMBER_TY -> capacity)
    2: QUANTITY_TY(Q33_actor)
[1] object NP: PROPERTY_OF_TY conjunction: []
[1] VP conjunction: [ at-least(function['number of things carried by the actor'/PHRASE_TY/TO_DECIDE_TY],PROPERTY_OF_TY) ]

result of sentence conversion for <number of things carried by the actor is at least the carrying capacity of the actor>:
basic representation:               [ at-least(function['number of things carried by the actor'/PHRASE_TY/TO_DECIDE_TY],PROPERTY_OF_TY) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: x conjunction: [ called(x)='sack' ^ K10'player's holdall'(x) ]
[1] VP conjunction: [ called(x)='sack' ^ K10'player's holdall'(x) ^ carries(QUANTITY_TY(Q33_actor),x) ]

result of sentence conversion for <actor is carrying a player's holdall ( called the sack )>:
basic representation:               [ exists x: called(x)='sack' ^ K10'player's holdall'(x) ^ carries(QUANTITY_TY(Q33_actor),x) ]
simp_make_kinds_explicit:           [ exists x: called(x)='sack' ^ K10'player's holdall'(x) ^ carries(QUANTITY_TY(Q33_actor),x) ]
simp_reduce_predicates:             [ exists x: called(x)='sack' ^ K10'player's holdall'(x) ^ is(QUANTITY_TY(Q33_actor),I7_CarriedBy(x)) ]

[1] subject NP: x such that: [ K2'thing'(x) ]
[1] object NP: QUANTITY_TY(Q33_actor) conjunction: [ K2'thing'(x) ]
[1] VP conjunction: [ K2'thing'(x) ^ is-carried-by(x,QUANTITY_TY(Q33_actor)) ]

result of sentence conversion for <things carried by the actor>:
basic representation:               [ K2'thing'(x) ^ is-carried-by(x,QUANTITY_TY(Q33_actor)) ]
simp_make_kinds_explicit:           [ K2'thing'(x) ^ is-carried-by(x,QUANTITY_TY(Q33_actor)) ]
simp_turn_right_way_round:          [ K2'thing'(x) ^ carries(QUANTITY_TY(Q33_actor),x) ]
simp_reduce_predicates:             [ K2'thing'(x) ^ is(QUANTITY_TY(Q33_actor),I7_CarriedBy(x)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_2;OBJECT_TY) such that: []
[1] object NP: x conjunction: [  NOT  [ light(x) ]
[1] VP conjunction: [  NOT  [ light(x) ^ is(LOCAL_VARIABLE_TY(t_2;OBJECT_TY),x) ]  ]

result of sentence conversion for <possible item is not lit>:
basic representation:               [  NOT  [ exists x: light(x) ^ is(LOCAL_VARIABLE_TY(t_2;OBJECT_TY),x) ]  ]
simp_eliminate_redundant_variables: [  NOT  [ light(LOCAL_VARIABLE_TY(t_2;OBJECT_TY)) ]  ]

[1] subject NP: LOCAL_VARIABLE_TY(t_2;OBJECT_TY) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(LOCAL_VARIABLE_TY(t_2;OBJECT_TY),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]  ]

result of sentence conversion for <the possible item is not the sack>:
basic representation:               [  NOT  [ is(LOCAL_VARIABLE_TY(t_2;OBJECT_TY),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]  ]

[1] subject NP: LOCAL_VARIABLE_TY(t_1;OBJECT_TY) such that: []
[1] object NP: VALUE_TY/OBJECT_TY(<null>) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),VALUE_TY/OBJECT_TY(<null>)) ]  ]

result of sentence conversion for <transferred item is not nothing>:
basic representation:               [  NOT  [ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),VALUE_TY/OBJECT_TY(<null>)) ]  ]

Chief AN for inserting the transferred item into the sack is Inserting it into
[1] subject NP: LOCAL_VARIABLE_TY(t_1;OBJECT_TY) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is-in(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]  ]

result of sentence conversion for <transferred item is not in the sack>:
basic representation:               [  NOT  [ is-in(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]  ]
simp_turn_right_way_round:          [  NOT  [ contains(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),LOCAL_VARIABLE_TY(t_1;OBJECT_TY)) ]  ]
simp_reduce_predicates:             [  NOT  [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),I7_InWhat(LOCAL_VARIABLE_TY(t_1;OBJECT_TY))) ]  ]

[2] subject NP: x such that: [ K2'thing'(x) ]
[2] object NP: QUANTITY_TY(Q33_actor) conjunction: [ K2'thing'(x) ]
[2] VP conjunction: [ K2'thing'(x) ^ is-carried-by(x,QUANTITY_TY(Q33_actor)) ]

result of sentence conversion for <things carried by the actor>:
basic representation:               [ K2'thing'(x) ^ is-carried-by(x,QUANTITY_TY(Q33_actor)) ]
simp_make_kinds_explicit:           [ K2'thing'(x) ^ is-carried-by(x,QUANTITY_TY(Q33_actor)) ]
simp_turn_right_way_round:          [ K2'thing'(x) ^ carries(QUANTITY_TY(Q33_actor),x) ]
simp_reduce_predicates:             [ K2'thing'(x) ^ is(QUANTITY_TY(Q33_actor),I7_CarriedBy(x)) ]

[1] subject NP: function['number of things carried by the actor'/PHRASE_TY/TO_DECIDE_TY] such that: []
PROPERTY_OF_TY
    1: PROPERTY_TY(properties:P'carrying capacity' - VALUE_TY/NUMBER_TY -> capacity)
    2: QUANTITY_TY(Q33_actor)
[1] object NP: PROPERTY_OF_TY conjunction: []
[1] VP conjunction: [ at-least(function['number of things carried by the actor'/PHRASE_TY/TO_DECIDE_TY],PROPERTY_OF_TY) ]

result of sentence conversion for <number of things carried by the actor is at least the carrying capacity of the actor>:
basic representation:               [ at-least(function['number of things carried by the actor'/PHRASE_TY/TO_DECIDE_TY],PROPERTY_OF_TY) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ carries(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor carries the noun>:
basic representation:               [ carries(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_CarriedBy(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q34_thing_implicitly_taken) such that: []
[1] object NP: VALUE_TY/OBJECT_TY(<null>) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(QUANTITY_TY(Q34_thing_implicitly_taken),VALUE_TY/OBJECT_TY(<null>)) ]  ]

result of sentence conversion for <thing implicitly taken is not nothing>:
basic representation:               [  NOT  [ is(QUANTITY_TY(Q34_thing_implicitly_taken),VALUE_TY/OBJECT_TY(<null>)) ]  ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: function['holder of the noun'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: QUANTITY_TY(second) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(function['holder of the noun'/PHRASE_TY/TO_DECIDE_TY],QUANTITY_TY(second)) ]  ]

result of sentence conversion for <holder of the noun is not the second noun>:
basic representation:               [  NOT  [ is(function['holder of the noun'/PHRASE_TY/TO_DECIDE_TY],QUANTITY_TY(second)) ]  ]

[1] subject NP: function['holder of the noun'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: x conjunction: [ called(x)='owner' ^ K8'person'(x) ]
[1] VP conjunction: [ called(x)='owner' ^ K8'person'(x) ^ is(function['holder of the noun'/PHRASE_TY/TO_DECIDE_TY],x) ]

result of sentence conversion for <holder of the noun is a person ( called the owner )>:
basic representation:               [ exists x: called(x)='owner' ^ K8'person'(x) ^ is(function['holder of the noun'/PHRASE_TY/TO_DECIDE_TY],x) ]
simp_eliminate_redundant_variables: [ called(function['holder of the noun'/PHRASE_TY/TO_DECIDE_TY])='owner' ^ K8'person'(function['holder of the noun'/PHRASE_TY/TO_DECIDE_TY]) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: QUANTITY_TY(Q33_actor) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(noun),QUANTITY_TY(Q33_actor)) ]

result of sentence conversion for <noun is the actor>:
basic representation:               [ is(QUANTITY_TY(noun),QUANTITY_TY(Q33_actor)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: function['the holder of the actor'/PHRASE_TY/TO_DECIDE_TY] conjunction: []
[1] VP conjunction: [ is-in(QUANTITY_TY(noun),function['the holder of the actor'/PHRASE_TY/TO_DECIDE_TY]) ]

result of sentence conversion for <noun is in the holder of the actor>:
basic representation:               [ is-in(QUANTITY_TY(noun),function['the holder of the actor'/PHRASE_TY/TO_DECIDE_TY]) ]
simp_turn_right_way_round:          [ contains(function['the holder of the actor'/PHRASE_TY/TO_DECIDE_TY],QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(function['the holder of the actor'/PHRASE_TY/TO_DECIDE_TY],I7_InWhat(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ carries(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is carrying the noun>:
basic representation:               [ carries(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_CarriedBy(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is wearing the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is wearing the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

Chief AN for taking off the noun is Taking off
[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is wearing the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: x conjunction: [ K1'room'(x) ]
[1] VP conjunction: [ K1'room'(x) ^ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),x) ]

result of sentence conversion for <h is a room>:
basic representation:               [ exists x: K1'room'(x) ^ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),x) ]
simp_eliminate_redundant_variables: [ K1'room'(LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: x conjunction: [ K6'supporter'(x) ]
[1] VP conjunction: [ K6'supporter'(x) ^ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),x) ]

result of sentence conversion for <h is a supporter>:
basic representation:               [ exists x: K6'supporter'(x) ^ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),x) ]
simp_eliminate_redundant_variables: [ K6'supporter'(LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

[2] subject NP: x such that: [ K2'thing'(x) ]
[2] object NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) conjunction: [ K2'thing'(x) ]
[2] VP conjunction: [ K2'thing'(x) ^ in-on(x,LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

result of sentence conversion for <things on h>:
basic representation:               [ K2'thing'(x) ^ in-on(x,LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]
simp_make_kinds_explicit:           [ K2'thing'(x) ^ in-on(x,LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]
simp_turn_right_way_round:          [ K2'thing'(x) ^ supports(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),x) ]
simp_reduce_predicates:             [ K2'thing'(x) ^ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),I7_OnWhat(x)) ]

[1] subject NP: function['number of things on h'/PHRASE_TY/TO_DECIDE_TY] such that: []
PROPERTY_OF_TY
    1: PROPERTY_TY(properties:P'carrying capacity' - VALUE_TY/NUMBER_TY -> capacity)
    2: LOCAL_VARIABLE_TY(t_0;OBJECT_TY)
[1] object NP: PROPERTY_OF_TY conjunction: []
[1] VP conjunction: [ at-least(function['number of things on h'/PHRASE_TY/TO_DECIDE_TY],PROPERTY_OF_TY) ]

result of sentence conversion for <number of things on h is at least the carrying capacity of h>:
basic representation:               [ at-least(function['number of things on h'/PHRASE_TY/TO_DECIDE_TY],PROPERTY_OF_TY) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: x conjunction: [ K5'container'(x) ]
[1] VP conjunction: [ K5'container'(x) ^ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),x) ]

result of sentence conversion for <h is a container>:
basic representation:               [ exists x: K5'container'(x) ^ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),x) ]
simp_eliminate_redundant_variables: [ K5'container'(LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

[2] subject NP: x such that: [ K2'thing'(x) ]
[2] object NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) conjunction: [ K2'thing'(x) ]
[2] VP conjunction: [ K2'thing'(x) ^ is-in(x,LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

result of sentence conversion for <things in h>:
basic representation:               [ K2'thing'(x) ^ is-in(x,LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]
simp_turn_right_way_round:          [ K2'thing'(x) ^ contains(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),x) ]
simp_reduce_predicates:             [ K2'thing'(x) ^ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),I7_InWhat(x)) ]

[1] subject NP: function['number of things in h'/PHRASE_TY/TO_DECIDE_TY] such that: []
PROPERTY_OF_TY
    1: PROPERTY_TY(properties:P'carrying capacity' - VALUE_TY/NUMBER_TY -> capacity)
    2: LOCAL_VARIABLE_TY(t_0;OBJECT_TY)
[1] object NP: PROPERTY_OF_TY conjunction: []
[1] VP conjunction: [ at-least(function['number of things in h'/PHRASE_TY/TO_DECIDE_TY],PROPERTY_OF_TY) ]

result of sentence conversion for <number of things in h is at least the carrying capacity of h>:
basic representation:               [ at-least(function['number of things in h'/PHRASE_TY/TO_DECIDE_TY],PROPERTY_OF_TY) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: function['the holder of the actor'/PHRASE_TY/TO_DECIDE_TY] conjunction: []
[1] VP conjunction: [ is-in(QUANTITY_TY(noun),function['the holder of the actor'/PHRASE_TY/TO_DECIDE_TY]) ]

result of sentence conversion for <noun is in the holder of the actor>:
basic representation:               [ is-in(QUANTITY_TY(noun),function['the holder of the actor'/PHRASE_TY/TO_DECIDE_TY]) ]
simp_turn_right_way_round:          [ contains(function['the holder of the actor'/PHRASE_TY/TO_DECIDE_TY],QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(function['the holder of the actor'/PHRASE_TY/TO_DECIDE_TY],I7_InWhat(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(second) such that: []
[1] object NP: O21'down' conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(second),O21'down') ]

result of sentence conversion for <second noun is down>:
basic representation:               [ is(QUANTITY_TY(second),O21'down') ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(second) conjunction: []
[1] VP conjunction: [ in-on(QUANTITY_TY(Q33_actor),QUANTITY_TY(second)) ]

result of sentence conversion for <the actor is on the second noun>:
basic representation:               [ in-on(QUANTITY_TY(Q33_actor),QUANTITY_TY(second)) ]
simp_turn_right_way_round:          [ supports(QUANTITY_TY(second),QUANTITY_TY(Q33_actor)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(second),I7_OnWhat(QUANTITY_TY(Q33_actor))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ carries(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is carrying the noun>:
basic representation:               [ carries(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_CarriedBy(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is wearing the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_2;OBJECT_TY) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) conjunction: []
[1] VP conjunction: [ is(LOCAL_VARIABLE_TY(t_2;OBJECT_TY),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

result of sentence conversion for <transfer ceiling is the noun-cpc>:
basic representation:               [ is(LOCAL_VARIABLE_TY(t_2;OBJECT_TY),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

[1] subject NP: QUANTITY_TY(second) such that: []
[1] object NP: x conjunction: [  NOT  [ K6'supporter'(x) ]
[1] VP conjunction: [  NOT  [ K6'supporter'(x) ^ is(QUANTITY_TY(second),x) ]  ]

result of sentence conversion for <second noun is not a supporter>:
basic representation:               [  NOT  [ exists x: K6'supporter'(x) ^ is(QUANTITY_TY(second),x) ]  ]
simp_negated_satisfiable:           [ cardinality(== 0)x: K6'supporter'(x) => is(QUANTITY_TY(second),x) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(second) conjunction: []
[1] VP conjunction: [ encloses(QUANTITY_TY(Q33_actor),QUANTITY_TY(second)) ]

result of sentence conversion for <actor encloses the second noun>:
basic representation:               [ encloses(QUANTITY_TY(Q33_actor),QUANTITY_TY(second)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is wearing the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

Chief AN for taking off the noun is Taking off
[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is wearing the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

[2] subject NP: x such that: [ K2'thing'(x) ]
[2] object NP: QUANTITY_TY(second) conjunction: [ K2'thing'(x) ]
[2] VP conjunction: [ K2'thing'(x) ^ in-on(x,QUANTITY_TY(second)) ]

result of sentence conversion for <things on the second noun>:
basic representation:               [ K2'thing'(x) ^ in-on(x,QUANTITY_TY(second)) ]
simp_make_kinds_explicit:           [ K2'thing'(x) ^ in-on(x,QUANTITY_TY(second)) ]
simp_turn_right_way_round:          [ K2'thing'(x) ^ supports(QUANTITY_TY(second),x) ]
simp_reduce_predicates:             [ K2'thing'(x) ^ is(QUANTITY_TY(second),I7_OnWhat(x)) ]

[1] subject NP: function['number of things on the second noun'/PHRASE_TY/TO_DECIDE_TY] such that: []
PROPERTY_OF_TY
    1: PROPERTY_TY(properties:P'carrying capacity' - VALUE_TY/NUMBER_TY -> capacity)
    2: QUANTITY_TY(second)
[1] object NP: PROPERTY_OF_TY conjunction: []
[1] VP conjunction: [ at-least(function['number of things on the second noun'/PHRASE_TY/TO_DECIDE_TY],PROPERTY_OF_TY) ]

result of sentence conversion for <number of things on the second noun is at least the carrying capacity of the second noun>:
basic representation:               [ at-least(function['number of things on the second noun'/PHRASE_TY/TO_DECIDE_TY],PROPERTY_OF_TY) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: QUANTITY_TY(second) conjunction: []
[1] VP conjunction: [ in-on(QUANTITY_TY(noun),QUANTITY_TY(second)) ]

result of sentence conversion for <noun is on the second noun>:
basic representation:               [ in-on(QUANTITY_TY(noun),QUANTITY_TY(second)) ]
simp_turn_right_way_round:          [ supports(QUANTITY_TY(second),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(second),I7_OnWhat(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(second) such that: []
[1] object NP: O21'down' conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(second),O21'down') ]

result of sentence conversion for <second noun is down>:
basic representation:               [ is(QUANTITY_TY(second),O21'down') ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(second) conjunction: []
[1] VP conjunction: [ is-in(QUANTITY_TY(Q33_actor),QUANTITY_TY(second)) ]

result of sentence conversion for <the actor is in the second noun>:
basic representation:               [ is-in(QUANTITY_TY(Q33_actor),QUANTITY_TY(second)) ]
simp_turn_right_way_round:          [ contains(QUANTITY_TY(second),QUANTITY_TY(Q33_actor)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(second),I7_InWhat(QUANTITY_TY(Q33_actor))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ carries(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is carrying the noun>:
basic representation:               [ carries(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_CarriedBy(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is wearing the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_2;OBJECT_TY) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) conjunction: []
[1] VP conjunction: [ is(LOCAL_VARIABLE_TY(t_2;OBJECT_TY),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

result of sentence conversion for <transfer ceiling is the noun-cpc>:
basic representation:               [ is(LOCAL_VARIABLE_TY(t_2;OBJECT_TY),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

[1] subject NP: QUANTITY_TY(second) such that: []
[1] object NP: x conjunction: [ K5'container'(x) ^ p44_closed(x) ]
[1] VP conjunction: [ K5'container'(x) ^ p44_closed(x) ^ is(QUANTITY_TY(second),x) ]

result of sentence conversion for <second noun is a closed container>:
basic representation:               [ exists x: K5'container'(x) ^ p44_closed(x) ^ is(QUANTITY_TY(second),x) ]
simp_eliminate_redundant_variables: [ K5'container'(QUANTITY_TY(second)) ^ p44_closed(QUANTITY_TY(second)) ]

[1] subject NP: QUANTITY_TY(second) such that: []
[1] object NP: x conjunction: [  NOT  [ K5'container'(x) ]
[1] VP conjunction: [  NOT  [ K5'container'(x) ^ is(QUANTITY_TY(second),x) ]  ]

result of sentence conversion for <second noun is not a container>:
basic representation:               [  NOT  [ exists x: K5'container'(x) ^ is(QUANTITY_TY(second),x) ]  ]
simp_negated_satisfiable:           [ cardinality(== 0)x: K5'container'(x) => is(QUANTITY_TY(second),x) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is wearing the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

Chief AN for taking off the noun is Taking off
[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is wearing the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

[2] subject NP: x such that: [ K2'thing'(x) ]
[2] object NP: QUANTITY_TY(second) conjunction: [ K2'thing'(x) ]
[2] VP conjunction: [ K2'thing'(x) ^ is-in(x,QUANTITY_TY(second)) ]

result of sentence conversion for <things in the second noun>:
basic representation:               [ K2'thing'(x) ^ is-in(x,QUANTITY_TY(second)) ]
simp_turn_right_way_round:          [ K2'thing'(x) ^ contains(QUANTITY_TY(second),x) ]
simp_reduce_predicates:             [ K2'thing'(x) ^ is(QUANTITY_TY(second),I7_InWhat(x)) ]

[1] subject NP: function['number of things in the second noun'/PHRASE_TY/TO_DECIDE_TY] such that: []
PROPERTY_OF_TY
    1: PROPERTY_TY(properties:P'carrying capacity' - VALUE_TY/NUMBER_TY -> capacity)
    2: QUANTITY_TY(second)
[1] object NP: PROPERTY_OF_TY conjunction: []
[1] VP conjunction: [ at-least(function['number of things in the second noun'/PHRASE_TY/TO_DECIDE_TY],PROPERTY_OF_TY) ]

result of sentence conversion for <number of things in the second noun is at least the carrying capacity of the second noun>:
basic representation:               [ at-least(function['number of things in the second noun'/PHRASE_TY/TO_DECIDE_TY],PROPERTY_OF_TY) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: QUANTITY_TY(second) conjunction: []
[1] VP conjunction: [ is-in(QUANTITY_TY(noun),QUANTITY_TY(second)) ]

result of sentence conversion for <noun is in the second noun>:
basic representation:               [ is-in(QUANTITY_TY(noun),QUANTITY_TY(second)) ]
simp_turn_right_way_round:          [ contains(QUANTITY_TY(second),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(second),I7_InWhat(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [  NOT  [ K2'thing'(x) ]
[1] VP conjunction: [  NOT  [ K2'thing'(x) ^ is(QUANTITY_TY(noun),x) ]  ]

result of sentence conversion for <noun is not a thing>:
basic representation:               [  NOT  [ exists x: K2'thing'(x) ^ is(QUANTITY_TY(noun),x) ]  ]
simp_negated_satisfiable:           [ cardinality(== 0)x: K2'thing'(x) => is(QUANTITY_TY(noun),x) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [  NOT  [ edible(x) ]
[1] VP conjunction: [  NOT  [ edible(x) ^ is(QUANTITY_TY(noun),x) ]  ]

result of sentence conversion for <the noun is not edible>:
basic representation:               [  NOT  [ exists x: edible(x) ^ is(QUANTITY_TY(noun),x) ]  ]
simp_eliminate_redundant_variables: [  NOT  [ edible(QUANTITY_TY(noun)) ]  ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is wearing the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

Chief AN for taking off the noun is Taking off
[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is wearing the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: QUANTITY_TY(Q35_room_gone_from) conjunction: []
[1] VP conjunction: [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),QUANTITY_TY(Q35_room_gone_from)) ]

result of sentence conversion for <h is the room gone from>:
basic representation:               [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),QUANTITY_TY(Q35_room_gone_from)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: QUANTITY_TY(Q38_vehicle_gone_by) conjunction: []
[1] VP conjunction: [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),QUANTITY_TY(Q38_vehicle_gone_by)) ]

result of sentence conversion for <h is the vehicle gone by>:
basic representation:               [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),QUANTITY_TY(Q38_vehicle_gone_by)) ]

[1] subject NP: QUANTITY_TY(Q37_door_gone_through) such that: []
[1] object NP: VALUE_TY/OBJECT_TY(<null>) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(QUANTITY_TY(Q37_door_gone_through),VALUE_TY/OBJECT_TY(<null>)) ]  ]

result of sentence conversion for <door gone through is not nothing>:
basic representation:               [  NOT  [ is(QUANTITY_TY(Q37_door_gone_through),VALUE_TY/OBJECT_TY(<null>)) ]  ]

[1] subject NP: QUANTITY_TY(Q37_door_gone_through) such that: []
[1] object NP: x conjunction: [ concealed(x) ]
[1] VP conjunction: [ concealed(x) ^ is(QUANTITY_TY(Q37_door_gone_through),x) ]

result of sentence conversion for <the door gone through is undescribed>:
basic representation:               [ exists x: concealed(x) ^ is(QUANTITY_TY(Q37_door_gone_through),x) ]
simp_eliminate_redundant_variables: [ concealed(QUANTITY_TY(Q37_door_gone_through)) ]

[1] subject NP: QUANTITY_TY(Q37_door_gone_through) such that: []
[1] object NP: VALUE_TY/OBJECT_TY(<null>) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(QUANTITY_TY(Q37_door_gone_through),VALUE_TY/OBJECT_TY(<null>)) ]  ]

result of sentence conversion for <door gone through is not nothing>:
basic representation:               [  NOT  [ is(QUANTITY_TY(Q37_door_gone_through),VALUE_TY/OBJECT_TY(<null>)) ]  ]

[1] subject NP: QUANTITY_TY(Q37_door_gone_through) such that: []
[1] object NP: x conjunction: [ p44_closed(x) ]
[1] VP conjunction: [ p44_closed(x) ^ is(QUANTITY_TY(Q37_door_gone_through),x) ]

result of sentence conversion for <the door gone through is closed>:
basic representation:               [ exists x: p44_closed(x) ^ is(QUANTITY_TY(Q37_door_gone_through),x) ]
simp_eliminate_redundant_variables: [ p44_closed(QUANTITY_TY(Q37_door_gone_through)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: O20'up' conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(noun),O20'up') ]

result of sentence conversion for <noun is up>:
basic representation:               [ is(QUANTITY_TY(noun),O20'up') ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: O21'down' conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(noun),O21'down') ]

result of sentence conversion for <noun is down>:
basic representation:               [ is(QUANTITY_TY(noun),O21'down') ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K3'direction'(x) ]
[1] VP conjunction: [ K3'direction'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a direction>:
basic representation:               [ exists x: K3'direction'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K3'direction'(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K4'door'(x) ]
[1] VP conjunction: [ K4'door'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a door>:
basic representation:               [ exists x: K4'door'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K4'door'(QUANTITY_TY(noun)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: x conjunction: [ K4'door'(x) ]
[1] VP conjunction: [ K4'door'(x) ^ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),x) ]

result of sentence conversion for <target is a door>:
basic representation:               [ exists x: K4'door'(x) ^ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),x) ]
simp_eliminate_redundant_variables: [ K4'door'(LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: function['the other side of the target from the room gone from'/PHRASE_TY/TO_DECIDE_TY] conjunction: []
[1] VP conjunction: [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),function['the other side of the target from the room gone from'/PHRASE_TY/TO_DECIDE_TY]) ]

result of sentence conversion for <target is the other side of the target from the room gone from>:
basic representation:               [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),function['the other side of the target from the room gone from'/PHRASE_TY/TO_DECIDE_TY]) ]

[1] subject NP: QUANTITY_TY(Q36_room_gone_to) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q36_room_gone_to),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

result of sentence conversion for <room gone to is the target>:
basic representation:               [ is(QUANTITY_TY(Q36_room_gone_to),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

[1] subject NP: QUANTITY_TY(Q36_room_gone_to) such that: []
[1] object NP: VALUE_TY/OBJECT_TY(<null>) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q36_room_gone_to),VALUE_TY/OBJECT_TY(<null>)) ]

result of sentence conversion for <room gone to is nothing>:
basic representation:               [ is(QUANTITY_TY(Q36_room_gone_to),VALUE_TY/OBJECT_TY(<null>)) ]

[1] subject NP: QUANTITY_TY(Q37_door_gone_through) such that: []
[1] object NP: VALUE_TY/OBJECT_TY(<null>) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q37_door_gone_through),VALUE_TY/OBJECT_TY(<null>)) ]

result of sentence conversion for <door gone through is nothing>:
basic representation:               [ is(QUANTITY_TY(Q37_door_gone_through),VALUE_TY/OBJECT_TY(<null>)) ]

[1] subject NP: QUANTITY_TY(Q38_vehicle_gone_by) such that: []
[1] object NP: VALUE_TY/OBJECT_TY(<null>) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q38_vehicle_gone_by),VALUE_TY/OBJECT_TY(<null>)) ]

result of sentence conversion for <vehicle gone by is nothing>:
basic representation:               [ is(QUANTITY_TY(Q38_vehicle_gone_by),VALUE_TY/OBJECT_TY(<null>)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(player) such that: []
[1] object NP: QUANTITY_TY(Q33_actor) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(player),QUANTITY_TY(Q33_actor)) ]

result of sentence conversion for <player is the actor>:
basic representation:               [ is(QUANTITY_TY(player),QUANTITY_TY(Q33_actor)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K3'direction'(x) ]
[1] VP conjunction: [ K3'direction'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a direction>:
basic representation:               [ exists x: K3'direction'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K3'direction'(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(real_location) such that: []
[1] object NP: QUANTITY_TY(Q35_room_gone_from) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(real_location),QUANTITY_TY(Q35_room_gone_from)) ]

result of sentence conversion for <location is the room gone from>:
basic representation:               [ is(QUANTITY_TY(real_location),QUANTITY_TY(Q35_room_gone_from)) ]

[1] subject NP: QUANTITY_TY(real_location) such that: []
[1] object NP: QUANTITY_TY(Q36_room_gone_to) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(real_location),QUANTITY_TY(Q36_room_gone_to)) ]

result of sentence conversion for <location is the room gone to>:
basic representation:               [ is(QUANTITY_TY(real_location),QUANTITY_TY(Q36_room_gone_to)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_1;OBJECT_TY) such that: []
[1] object NP: QUANTITY_TY(Q35_room_gone_from) conjunction: []
[1] VP conjunction: [ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),QUANTITY_TY(Q35_room_gone_from)) ]

result of sentence conversion for <room back the other way is the room gone from>:
basic representation:               [ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),QUANTITY_TY(Q35_room_gone_from)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_1;OBJECT_TY) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_2;OBJECT_TY) conjunction: []
[1] VP conjunction: [ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),LOCAL_VARIABLE_TY(t_2;OBJECT_TY)) ]

result of sentence conversion for <the room back the other way is the room normally this way>:
basic representation:               [ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),LOCAL_VARIABLE_TY(t_2;OBJECT_TY)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: O20'up' conjunction: []
[1] VP conjunction: [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),O20'up') ]

result of sentence conversion for <back way is up>:
basic representation:               [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),O20'up') ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: O21'down' conjunction: []
[1] VP conjunction: [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),O21'down') ]

result of sentence conversion for <back way is down>:
basic representation:               [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),O21'down') ]

[1] subject NP: QUANTITY_TY(real_location) such that: []
[1] object NP: QUANTITY_TY(Q35_room_gone_from) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(real_location),QUANTITY_TY(Q35_room_gone_from)) ]

result of sentence conversion for <location is the room gone from>:
basic representation:               [ is(QUANTITY_TY(real_location),QUANTITY_TY(Q35_room_gone_from)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: O20'up' conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(noun),O20'up') ]

result of sentence conversion for <noun is up>:
basic representation:               [ is(QUANTITY_TY(noun),O20'up') ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: O21'down' conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(noun),O21'down') ]

result of sentence conversion for <noun is down>:
basic representation:               [ is(QUANTITY_TY(noun),O21'down') ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: O20'up' conjunction: []
[1] VP conjunction: [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),O20'up') ]

result of sentence conversion for <back way is up>:
basic representation:               [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),O20'up') ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: O21'down' conjunction: []
[1] VP conjunction: [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),O21'down') ]

result of sentence conversion for <back way is down>:
basic representation:               [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),O21'down') ]

[1] subject NP: QUANTITY_TY(real_location) such that: []
[1] object NP: QUANTITY_TY(Q35_room_gone_from) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(real_location),QUANTITY_TY(Q35_room_gone_from)) ]

result of sentence conversion for <location is the room gone from>:
basic representation:               [ is(QUANTITY_TY(real_location),QUANTITY_TY(Q35_room_gone_from)) ]

[1] subject NP: QUANTITY_TY(Q38_vehicle_gone_by) such that: []
[1] object NP: VALUE_TY/OBJECT_TY(<null>) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(QUANTITY_TY(Q38_vehicle_gone_by),VALUE_TY/OBJECT_TY(<null>)) ]  ]

result of sentence conversion for <vehicle gone by is not nothing>:
basic representation:               [  NOT  [ is(QUANTITY_TY(Q38_vehicle_gone_by),VALUE_TY/OBJECT_TY(<null>)) ]  ]

[1] subject NP: QUANTITY_TY(Q38_vehicle_gone_by) such that: []
[1] object NP: x conjunction: [ K6'supporter'(x) ]
[1] VP conjunction: [ K6'supporter'(x) ^ is(QUANTITY_TY(Q38_vehicle_gone_by),x) ]

result of sentence conversion for <vehicle gone by is a supporter>:
basic representation:               [ exists x: K6'supporter'(x) ^ is(QUANTITY_TY(Q38_vehicle_gone_by),x) ]
simp_eliminate_redundant_variables: [ K6'supporter'(QUANTITY_TY(Q38_vehicle_gone_by)) ]

[1] subject NP: QUANTITY_TY(Q39_thing_gone_with) such that: []
[1] object NP: VALUE_TY/OBJECT_TY(<null>) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(QUANTITY_TY(Q39_thing_gone_with),VALUE_TY/OBJECT_TY(<null>)) ]  ]

result of sentence conversion for <thing gone with is not nothing>:
basic representation:               [  NOT  [ is(QUANTITY_TY(Q39_thing_gone_with),VALUE_TY/OBJECT_TY(<null>)) ]  ]

[1] subject NP: QUANTITY_TY(player) such that: []
[1] object NP: QUANTITY_TY(Q39_thing_gone_with) conjunction: []
[1] VP conjunction: [ is-in(QUANTITY_TY(player),QUANTITY_TY(Q39_thing_gone_with)) ]

result of sentence conversion for <player is within the thing gone with>:
basic representation:               [ is-in(QUANTITY_TY(player),QUANTITY_TY(Q39_thing_gone_with)) ]
simp_turn_right_way_round:          [ contains(QUANTITY_TY(Q39_thing_gone_with),QUANTITY_TY(player)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q39_thing_gone_with),I7_InWhat(QUANTITY_TY(player))) ]

[1] subject NP: QUANTITY_TY(player) such that: []
[1] object NP: QUANTITY_TY(Q38_vehicle_gone_by) conjunction: []
[1] VP conjunction: [ is-in(QUANTITY_TY(player),QUANTITY_TY(Q38_vehicle_gone_by)) ]

result of sentence conversion for <player is within the vehicle gone by>:
basic representation:               [ is-in(QUANTITY_TY(player),QUANTITY_TY(Q38_vehicle_gone_by)) ]
simp_turn_right_way_round:          [ contains(QUANTITY_TY(Q38_vehicle_gone_by),QUANTITY_TY(player)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q38_vehicle_gone_by),I7_InWhat(QUANTITY_TY(player))) ]

[1] subject NP: QUANTITY_TY(real_location) such that: []
[1] object NP: QUANTITY_TY(Q35_room_gone_from) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(real_location),QUANTITY_TY(Q35_room_gone_from)) ]

result of sentence conversion for <location is the room gone from>:
basic representation:               [ is(QUANTITY_TY(real_location),QUANTITY_TY(Q35_room_gone_from)) ]

[1] subject NP: QUANTITY_TY(player) such that: []
[1] object NP: QUANTITY_TY(Q38_vehicle_gone_by) conjunction: []
[1] VP conjunction: [ is-in(QUANTITY_TY(player),QUANTITY_TY(Q38_vehicle_gone_by)) ]

result of sentence conversion for <player is within the vehicle gone by>:
basic representation:               [ is-in(QUANTITY_TY(player),QUANTITY_TY(Q38_vehicle_gone_by)) ]
simp_turn_right_way_round:          [ contains(QUANTITY_TY(Q38_vehicle_gone_by),QUANTITY_TY(player)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q38_vehicle_gone_by),I7_InWhat(QUANTITY_TY(player))) ]

[1] subject NP: QUANTITY_TY(player) such that: []
[1] object NP: QUANTITY_TY(Q39_thing_gone_with) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is-in(QUANTITY_TY(player),QUANTITY_TY(Q39_thing_gone_with)) ]  ]

result of sentence conversion for <the player is not within the thing gone with>:
basic representation:               [  NOT  [ is-in(QUANTITY_TY(player),QUANTITY_TY(Q39_thing_gone_with)) ]  ]
simp_turn_right_way_round:          [  NOT  [ contains(QUANTITY_TY(Q39_thing_gone_with),QUANTITY_TY(player)) ]  ]
simp_reduce_predicates:             [  NOT  [ is(QUANTITY_TY(Q39_thing_gone_with),I7_InWhat(QUANTITY_TY(player))) ]  ]

Chief AN for looking is Looking
[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K4'door'(x) ]
[1] VP conjunction: [ K4'door'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a door>:
basic representation:               [ exists x: K4'door'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K4'door'(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K3'direction'(x) ]
[1] VP conjunction: [ K3'direction'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a direction>:
basic representation:               [ exists x: K3'direction'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K3'direction'(QUANTITY_TY(noun)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),QUANTITY_TY(noun)) ]

result of sentence conversion for <local ceiling is the noun>:
basic representation:               [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [  NOT  [ enterable(x) ]
[1] VP conjunction: [  NOT  [ enterable(x) ^ is(QUANTITY_TY(noun),x) ]  ]

result of sentence conversion for <noun is not enterable>:
basic representation:               [  NOT  [ exists x: enterable(x) ^ is(QUANTITY_TY(noun),x) ]  ]
simp_eliminate_redundant_variables: [  NOT  [ enterable(QUANTITY_TY(noun)) ]  ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K5'container'(x) ^ p44_closed(x) ]
[1] VP conjunction: [ K5'container'(x) ^ p44_closed(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a closed container>:
basic representation:               [ exists x: K5'container'(x) ^ p44_closed(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K5'container'(QUANTITY_TY(noun)) ^ p44_closed(QUANTITY_TY(noun)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: QUANTITY_TY(Q33_actor) conjunction: []
[1] VP conjunction: [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),QUANTITY_TY(Q33_actor)) ]

result of sentence conversion for <local ceiling is the actor>:
basic representation:               [ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),QUANTITY_TY(Q33_actor)) ]

[1] subject NP: function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: function['the holder of the noun'/PHRASE_TY/TO_DECIDE_TY] conjunction: []
[1] VP conjunction: [ is(function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY],function['the holder of the noun'/PHRASE_TY/TO_DECIDE_TY]) ]

result of sentence conversion for <holder of the actor is the holder of the noun>:
basic representation:               [ is(function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY],function['the holder of the noun'/PHRASE_TY/TO_DECIDE_TY]) ]

[1] subject NP: function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY],LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]  ]

result of sentence conversion for <holder of the actor is not the local ceiling>:
basic representation:               [  NOT  [ is(function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY],LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]  ]

Chief AN for exiting is Exiting
[1] subject NP: function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_1;OBJECT_TY) conjunction: []
[1] VP conjunction: [ is(function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY],LOCAL_VARIABLE_TY(t_1;OBJECT_TY)) ]

result of sentence conversion for <holder of the actor is the target>:
basic representation:               [ is(function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY],LOCAL_VARIABLE_TY(t_1;OBJECT_TY)) ]

[1] subject NP: function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ is(function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY],QUANTITY_TY(noun)) ]

result of sentence conversion for <holder of the actor is the noun>:
basic representation:               [ is(function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY],QUANTITY_TY(noun)) ]

[1] subject NP: function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: function['the holder of the noun'/PHRASE_TY/TO_DECIDE_TY] conjunction: []
[1] VP conjunction: [ is(function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY],function['the holder of the noun'/PHRASE_TY/TO_DECIDE_TY]) ]

result of sentence conversion for <holder of the actor is the holder of the noun>:
basic representation:               [ is(function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY],function['the holder of the noun'/PHRASE_TY/TO_DECIDE_TY]) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_1;OBJECT_TY) conjunction: []
[1] VP conjunction: [ is-part-of(QUANTITY_TY(noun),LOCAL_VARIABLE_TY(t_1;OBJECT_TY)) ]

result of sentence conversion for <noun is part of the target>:
basic representation:               [ is-part-of(QUANTITY_TY(noun),LOCAL_VARIABLE_TY(t_1;OBJECT_TY)) ]
simp_turn_right_way_round:          [ incorporates(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),(QUANTITY_TY(noun).component_parent)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_1;OBJECT_TY) such that: []
[1] object NP: x conjunction: [ K2'thing'(x) ]
[1] VP conjunction: [ K2'thing'(x) ^ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),x) ]

result of sentence conversion for <target is a thing>:
basic representation:               [ exists x: K2'thing'(x) ^ is(LOCAL_VARIABLE_TY(t_1;OBJECT_TY),x) ]
simp_eliminate_redundant_variables: [ K2'thing'(LOCAL_VARIABLE_TY(t_1;OBJECT_TY)) ]

[1] subject NP: function['holder of the target'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) conjunction: []
[1] VP conjunction: [ is(function['holder of the target'/PHRASE_TY/TO_DECIDE_TY],LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

result of sentence conversion for <holder of the target is the local ceiling>:
basic representation:               [ is(function['holder of the target'/PHRASE_TY/TO_DECIDE_TY],LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

Chief AN for entering the target is Entering
[1] subject NP: function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_1;OBJECT_TY) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY],LOCAL_VARIABLE_TY(t_1;OBJECT_TY)) ]  ]

result of sentence conversion for <holder of the actor is not the target>:
basic representation:               [  NOT  [ is(function['holder of the actor'/PHRASE_TY/TO_DECIDE_TY],LOCAL_VARIABLE_TY(t_1;OBJECT_TY)) ]  ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K5'container'(x) ]
[1] VP conjunction: [ K5'container'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a container>:
basic representation:               [ exists x: K5'container'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K5'container'(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q40_container_exited_from) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q40_container_exited_from),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

result of sentence conversion for <container exited from is the local room>:
basic representation:               [ is(QUANTITY_TY(Q40_container_exited_from),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

[1] subject NP: function['room-or-door outside from the local room'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: VALUE_TY/OBJECT_TY(<null>) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(function['room-or-door outside from the local room'/PHRASE_TY/TO_DECIDE_TY],VALUE_TY/OBJECT_TY(<null>)) ]  ]

result of sentence conversion for <room-or-door outside from the local room is not nothing>:
basic representation:               [  NOT  [ is(function['room-or-door outside from the local room'/PHRASE_TY/TO_DECIDE_TY],VALUE_TY/OBJECT_TY(<null>)) ]  ]

[1] subject NP: QUANTITY_TY(Q40_container_exited_from) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q40_container_exited_from),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

result of sentence conversion for <container exited from is the local room>:
basic representation:               [ is(QUANTITY_TY(Q40_container_exited_from),LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: x conjunction: [ called(x)='cage' ^ K5'container'(x) ^ p44_closed(x) ]
[1] VP conjunction: [ called(x)='cage' ^ K5'container'(x) ^ p44_closed(x) ^ is-in(QUANTITY_TY(Q33_actor),x) ]

result of sentence conversion for <actor is in a closed container ( called the cage )>:
basic representation:               [ exists x: called(x)='cage' ^ K5'container'(x) ^ p44_closed(x) ^ is-in(QUANTITY_TY(Q33_actor),x) ]
simp_turn_right_way_round:          [ exists x: called(x)='cage' ^ K5'container'(x) ^ p44_closed(x) ^ contains(x,QUANTITY_TY(Q33_actor)) ]
simp_reduce_predicates:             [ exists x: called(x)='cage' ^ K5'container'(x) ^ p44_closed(x) ^ is(x,I7_InWhat(QUANTITY_TY(Q33_actor))) ]
simp_eliminate_redundant_variables: [ called(I7_InWhat(QUANTITY_TY(Q33_actor)))='cage' ^ K5'container'(I7_InWhat(QUANTITY_TY(Q33_actor))) ^ p44_closed(I7_InWhat(QUANTITY_TY(Q33_actor))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: x conjunction: [ called(x)='platform' ^ K6'supporter'(x) ]
[1] VP conjunction: [ called(x)='platform' ^ K6'supporter'(x) ^ in-on(QUANTITY_TY(Q33_actor),x) ]

result of sentence conversion for <actor is on a supporter ( called the platform )>:
basic representation:               [ exists x: called(x)='platform' ^ K6'supporter'(x) ^ in-on(QUANTITY_TY(Q33_actor),x) ]
simp_make_kinds_explicit:           [ exists x: called(x)='platform' ^ K6'supporter'(x) ^ in-on(QUANTITY_TY(Q33_actor),x) ]
simp_turn_right_way_round:          [ exists x: called(x)='platform' ^ K6'supporter'(x) ^ supports(x,QUANTITY_TY(Q33_actor)) ]
simp_reduce_predicates:             [ exists x: called(x)='platform' ^ K6'supporter'(x) ^ is(x,I7_OnWhat(QUANTITY_TY(Q33_actor))) ]
simp_eliminate_redundant_variables: [ called(I7_OnWhat(QUANTITY_TY(Q33_actor)))='platform' ^ K6'supporter'(I7_OnWhat(QUANTITY_TY(Q33_actor))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ in-on(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is on the noun>:
basic representation:               [ in-on(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_turn_right_way_round:          [ supports(QUANTITY_TY(noun),QUANTITY_TY(Q33_actor)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(noun),I7_OnWhat(QUANTITY_TY(Q33_actor))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ is-carried-by(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is carried by the noun>:
basic representation:               [ is-carried-by(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_turn_right_way_round:          [ carries(QUANTITY_TY(noun),QUANTITY_TY(Q33_actor)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(noun),I7_CarriedBy(QUANTITY_TY(Q33_actor))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q42_visibility_level_count) such that: []
[1] object NP: '0'/VALUE_TY/NUMBER_TY conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q42_visibility_level_count),'0'/VALUE_TY/NUMBER_TY) ]

result of sentence conversion for <visibility level count is 0>:
basic representation:               [ is(QUANTITY_TY(Q42_visibility_level_count),'0'/VALUE_TY/NUMBER_TY) ]

[1] subject NP: QUANTITY_TY(Q43_visibility_ceiling) such that: []
[1] object NP: QUANTITY_TY(real_location) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q43_visibility_ceiling),QUANTITY_TY(real_location)) ]

result of sentence conversion for <visibility ceiling is the location>:
basic representation:               [ is(QUANTITY_TY(Q43_visibility_ceiling),QUANTITY_TY(real_location)) ]

[1] subject NP: QUANTITY_TY(Q42_visibility_level_count) such that: []
[1] object NP: '0'/VALUE_TY/NUMBER_TY conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q42_visibility_level_count),'0'/VALUE_TY/NUMBER_TY) ]

result of sentence conversion for <visibility level count is 0>:
basic representation:               [ is(QUANTITY_TY(Q42_visibility_level_count),'0'/VALUE_TY/NUMBER_TY) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_1;NUMBER_TY) such that: []
[1] object NP: '0'/VALUE_TY/NUMBER_TY conjunction: []
[1] VP conjunction: [ greater-than(LOCAL_VARIABLE_TY(t_1;NUMBER_TY),'0'/VALUE_TY/NUMBER_TY) ]

result of sentence conversion for <ip count is greater than 0>:
basic representation:               [ greater-than(LOCAL_VARIABLE_TY(t_1;NUMBER_TY),'0'/VALUE_TY/NUMBER_TY) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_0;OBJECT_TY) such that: []
[1] object NP: x conjunction: [ workflag(x) ]
[1] VP conjunction: [ workflag(x) ^ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),x) ]

result of sentence conversion for <intermediate position is marked for listing>:
basic representation:               [ exists x: workflag(x) ^ is(LOCAL_VARIABLE_TY(t_0;OBJECT_TY),x) ]
simp_eliminate_redundant_variables: [ workflag(LOCAL_VARIABLE_TY(t_0;OBJECT_TY)) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_2;NUMBER_TY) such that: []
[1] object NP: '0'/VALUE_TY/NUMBER_TY conjunction: []
[1] VP conjunction: [ greater-than(LOCAL_VARIABLE_TY(t_2;NUMBER_TY),'0'/VALUE_TY/NUMBER_TY) ]

result of sentence conversion for <top-down ip count is greater than 0>:
basic representation:               [ greater-than(LOCAL_VARIABLE_TY(t_2;NUMBER_TY),'0'/VALUE_TY/NUMBER_TY) ]

[1] subject NP: LOCAL_VARIABLE_TY(t_1;NUMBER_TY) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_2;NUMBER_TY) conjunction: []
[1] VP conjunction: [ less-than(LOCAL_VARIABLE_TY(t_1;NUMBER_TY),LOCAL_VARIABLE_TY(t_2;NUMBER_TY)) ]

result of sentence conversion for <ip count is less than the top-down ip count>:
basic representation:               [ less-than(LOCAL_VARIABLE_TY(t_1;NUMBER_TY),LOCAL_VARIABLE_TY(t_2;NUMBER_TY)) ]

[1] subject NP: QUANTITY_TY(real_location) such that: []
[1] object NP: x conjunction: [ visited(x) ]
[1] VP conjunction: [ visited(x) ^ is(QUANTITY_TY(real_location),x) ]

result of sentence conversion for <location is visited>:
basic representation:               [ exists x: visited(x) ^ is(QUANTITY_TY(real_location),x) ]
simp_eliminate_redundant_variables: [ visited(QUANTITY_TY(real_location)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]  ]

result of sentence conversion for <actor is not the player>:
basic representation:               [  NOT  [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]  ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K5'container'(x) ]
[1] VP conjunction: [ K5'container'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <the noun is a container>:
basic representation:               [ exists x: K5'container'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K5'container'(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K11'device'(x) ]
[1] VP conjunction: [ K11'device'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <the noun is a device>:
basic representation:               [ exists x: K11'device'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K11'device'(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K3'direction'(x) ]
[1] VP conjunction: [ K3'direction'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a direction>:
basic representation:               [ exists x: K3'direction'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K3'direction'(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K11'device'(x) ]
[1] VP conjunction: [ K11'device'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a device>:
basic representation:               [ exists x: K11'device'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K11'device'(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]  ]

result of sentence conversion for <actor is not the player>:
basic representation:               [  NOT  [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]  ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]  ]

result of sentence conversion for <actor is not the player>:
basic representation:               [  NOT  [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]  ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [  NOT  [ K5'container'(x) ]
[1] VP conjunction: [  NOT  [ K5'container'(x) ^ is(QUANTITY_TY(noun),x) ]  ]

result of sentence conversion for <noun is not a container>:
basic representation:               [  NOT  [ exists x: K5'container'(x) ^ is(QUANTITY_TY(noun),x) ]  ]
simp_negated_satisfiable:           [ cardinality(== 0)x: K5'container'(x) => is(QUANTITY_TY(noun),x) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [  NOT  [ K6'supporter'(x) ]
[1] VP conjunction: [  NOT  [ K6'supporter'(x) ^ is(QUANTITY_TY(noun),x) ]  ]

result of sentence conversion for <the noun is not a supporter>:
basic representation:               [  NOT  [ exists x: K6'supporter'(x) ^ is(QUANTITY_TY(noun),x) ]  ]
simp_negated_satisfiable:           [ cardinality(== 0)x: K6'supporter'(x) => is(QUANTITY_TY(noun),x) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K5'container'(x) ^ p44_closed(x) ^ p22_opaque(x) ]
[1] VP conjunction: [ K5'container'(x) ^ p44_closed(x) ^ p22_opaque(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a closed opaque container>:
basic representation:               [ exists x: K5'container'(x) ^ p44_closed(x) ^ p22_opaque(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K5'container'(QUANTITY_TY(noun)) ^ p44_closed(QUANTITY_TY(noun)) ^ p22_opaque(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[2] subject NP: x such that: [ K2'thing'(x) ^ p24_described(x) ]
[2] object NP: y conjunction: [ K2'thing'(x) ^ p24_described(x) ^  NOT  [ exists y: scenery(y) ]
[2] VP conjunction: [ K2'thing'(x) ^ p24_described(x) ^  NOT  [ exists y: scenery(y) ^ is(x,y) ]  ]

result of sentence conversion for <a described thing which is not scenery>:
basic representation:               [ K2'thing'(x) ^ p24_described(x) ^  NOT  [ exists y: scenery(y) ^ is(x,y) ]  ]
simp_eliminate_redundant_variables: [ K2'thing'(x) ^ p24_described(x) ^  NOT  [ scenery(x) ]  ]

[1] object NP: x conjunction: [ K2'thing'(x) ^ p24_described(x) ^  NOT  [ scenery(x) ]  ]
[1] VP conjunction: [ K2'thing'(x) ^ p24_described(x) ^  NOT  [ scenery(x) ]  ^ contains(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun contains a described thing which is not scenery>:
basic representation:               [ exists x: K2'thing'(x) ^ p24_described(x) ^  NOT  [ scenery(x) ]  ^ contains(QUANTITY_TY(noun),x) ]
simp_reduce_predicates:             [ exists x: K2'thing'(x) ^ p24_described(x) ^  NOT  [ scenery(x) ]  ^ is(QUANTITY_TY(noun),I7_InWhat(x)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[2] subject NP: x such that: [ K2'thing'(x) ^ p24_described(x) ]
[2] object NP: y conjunction: [ K2'thing'(x) ^ p24_described(x) ^  NOT  [ exists y: scenery(y) ]
[2] VP conjunction: [ K2'thing'(x) ^ p24_described(x) ^  NOT  [ exists y: scenery(y) ^ is(x,y) ]  ]

result of sentence conversion for <a described thing which is not scenery>:
basic representation:               [ K2'thing'(x) ^ p24_described(x) ^  NOT  [ exists y: scenery(y) ^ is(x,y) ]  ]
simp_eliminate_redundant_variables: [ K2'thing'(x) ^ p24_described(x) ^  NOT  [ scenery(x) ]  ]

[1] object NP: x conjunction: [ K2'thing'(x) ^ p24_described(x) ^  NOT  [ scenery(x) ]  ]
[1] VP conjunction: [ K2'thing'(x) ^ p24_described(x) ^  NOT  [ scenery(x) ]  ^ supports(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun supports a described thing which is not scenery>:
basic representation:               [ exists x: K2'thing'(x) ^ p24_described(x) ^  NOT  [ scenery(x) ]  ^ supports(QUANTITY_TY(noun),x) ]
simp_make_kinds_explicit:           [ exists x: K2'thing'(x) ^ p24_described(x) ^  NOT  [ scenery(x) ]  ^ supports(QUANTITY_TY(noun),x) ]
simp_reduce_predicates:             [ exists x: K2'thing'(x) ^ p24_described(x) ^  NOT  [ scenery(x) ]  ^ is(QUANTITY_TY(noun),I7_OnWhat(x)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]  ]

result of sentence conversion for <actor is not the player>:
basic representation:               [  NOT  [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]  ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ lockable(x) ]
[1] VP conjunction: [ lockable(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <the noun is lockable>:
basic representation:               [ exists x: lockable(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ lockable(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ locked(x) ]
[1] VP conjunction: [ locked(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is locked>:
basic representation:               [ exists x: locked(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ locked(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ open(x) ]
[1] VP conjunction: [ open(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is open>:
basic representation:               [ exists x: open(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ open(QUANTITY_TY(noun)) ]

[1] subject NP: function['holder of the second noun'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: QUANTITY_TY(Q33_actor) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(function['holder of the second noun'/PHRASE_TY/TO_DECIDE_TY],QUANTITY_TY(Q33_actor)) ]  ]

result of sentence conversion for <holder of the second noun is not the actor>:
basic representation:               [  NOT  [ is(function['holder of the second noun'/PHRASE_TY/TO_DECIDE_TY],QUANTITY_TY(Q33_actor)) ]  ]

PROPERTY_OF_TY
    1: PROPERTY_TY(properties:P'matching key' - VALUE_TY/OBJECT_TY(<null>) -> with_key)
    2: QUANTITY_TY(noun)
[1] subject NP: PROPERTY_OF_TY such that: []
[1] object NP: QUANTITY_TY(second) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(PROPERTY_OF_TY,QUANTITY_TY(second)) ]  ]

result of sentence conversion for <the matching key of the noun is not the second noun>:
basic representation:               [  NOT  [ is(PROPERTY_OF_TY,QUANTITY_TY(second)) ]  ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ locked(x) ]
[1] VP conjunction: [ locked(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is locked>:
basic representation:               [ exists x: locked(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ locked(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: x conjunction: [ A1'visible'(x) ]
[1] VP conjunction: [ A1'visible'(x) ^ is(QUANTITY_TY(Q33_actor),x) ]

result of sentence conversion for <actor is visible>:
basic representation:               [ exists x: A1'visible'(x) ^ is(QUANTITY_TY(Q33_actor),x) ]
simp_eliminate_redundant_variables: [ A1'visible'(QUANTITY_TY(Q33_actor)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ lockable(x) ]
[1] VP conjunction: [ lockable(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <the noun is lockable>:
basic representation:               [ exists x: lockable(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ lockable(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [  NOT  [ locked(x) ]
[1] VP conjunction: [  NOT  [ locked(x) ^ is(QUANTITY_TY(noun),x) ]  ]

result of sentence conversion for <noun is not locked>:
basic representation:               [  NOT  [ exists x: locked(x) ^ is(QUANTITY_TY(noun),x) ]  ]
simp_eliminate_redundant_variables: [  NOT  [ locked(QUANTITY_TY(noun)) ]  ]

[1] subject NP: function['holder of the second noun'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: QUANTITY_TY(Q33_actor) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(function['holder of the second noun'/PHRASE_TY/TO_DECIDE_TY],QUANTITY_TY(Q33_actor)) ]  ]

result of sentence conversion for <holder of the second noun is not the actor>:
basic representation:               [  NOT  [ is(function['holder of the second noun'/PHRASE_TY/TO_DECIDE_TY],QUANTITY_TY(Q33_actor)) ]  ]

PROPERTY_OF_TY
    1: PROPERTY_TY(properties:P'matching key' - VALUE_TY/OBJECT_TY(<null>) -> with_key)
    2: QUANTITY_TY(noun)
[1] subject NP: PROPERTY_OF_TY such that: []
[1] object NP: QUANTITY_TY(second) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(PROPERTY_OF_TY,QUANTITY_TY(second)) ]  ]

result of sentence conversion for <the matching key of the noun is not the second noun>:
basic representation:               [  NOT  [ is(PROPERTY_OF_TY,QUANTITY_TY(second)) ]  ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [  NOT  [ locked(x) ]
[1] VP conjunction: [  NOT  [ locked(x) ^ is(QUANTITY_TY(noun),x) ]  ]

result of sentence conversion for <noun is not locked>:
basic representation:               [  NOT  [ exists x: locked(x) ^ is(QUANTITY_TY(noun),x) ]  ]
simp_eliminate_redundant_variables: [  NOT  [ locked(QUANTITY_TY(noun)) ]  ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: x conjunction: [ A1'visible'(x) ]
[1] VP conjunction: [ A1'visible'(x) ^ is(QUANTITY_TY(Q33_actor),x) ]

result of sentence conversion for <actor is visible>:
basic representation:               [ exists x: A1'visible'(x) ^ is(QUANTITY_TY(Q33_actor),x) ]
simp_eliminate_redundant_variables: [ A1'visible'(QUANTITY_TY(Q33_actor)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ on(x) ]
[1] VP conjunction: [ on(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is switched on>:
basic representation:               [ exists x: on(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ on(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ on(x) ]
[1] VP conjunction: [ on(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is switched on>:
basic representation:               [ exists x: on(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ on(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ p51_switched_off(x) ]
[1] VP conjunction: [ p51_switched_off(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is switched off>:
basic representation:               [ exists x: p51_switched_off(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ p51_switched_off(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ p51_switched_off(x) ]
[1] VP conjunction: [ p51_switched_off(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is switched off>:
basic representation:               [ exists x: p51_switched_off(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ p51_switched_off(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ openable(x) ]
[1] VP conjunction: [ openable(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <the noun is openable>:
basic representation:               [ exists x: openable(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ openable(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ locked(x) ]
[1] VP conjunction: [ locked(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <the noun is locked>:
basic representation:               [ exists x: locked(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ locked(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ open(x) ]
[1] VP conjunction: [ open(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is open>:
basic representation:               [ exists x: open(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ open(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ open(x) ]
[1] VP conjunction: [ open(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is open>:
basic representation:               [ exists x: open(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ open(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K5'container'(x) ^ p22_opaque(x) ]
[1] VP conjunction: [ K5'container'(x) ^ p22_opaque(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <the noun is an opaque container>:
basic representation:               [ exists x: K5'container'(x) ^ p22_opaque(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K5'container'(QUANTITY_TY(noun)) ^ p22_opaque(QUANTITY_TY(noun)) ]

[1] subject NP: function['the first thing held by the noun'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: VALUE_TY/OBJECT_TY(<null>) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(function['the first thing held by the noun'/PHRASE_TY/TO_DECIDE_TY],VALUE_TY/OBJECT_TY(<null>)) ]  ]

result of sentence conversion for <the first thing held by the noun is not nothing>:
basic representation:               [  NOT  [ is(function['the first thing held by the noun'/PHRASE_TY/TO_DECIDE_TY],VALUE_TY/OBJECT_TY(<null>)) ]  ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: QUANTITY_TY(Q33_actor) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ encloses(QUANTITY_TY(noun),QUANTITY_TY(Q33_actor)) ]  ]

result of sentence conversion for <the noun does not enclose the actor>:
basic representation:               [  NOT  [ encloses(QUANTITY_TY(noun),QUANTITY_TY(Q33_actor)) ]  ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(player) such that: []
[1] object NP: QUANTITY_TY(Q33_actor) conjunction: []
[1] VP conjunction: [ can-see(QUANTITY_TY(player),QUANTITY_TY(Q33_actor)) ]

result of sentence conversion for <player can see the actor>:
basic representation:               [ can-see(QUANTITY_TY(player),QUANTITY_TY(Q33_actor)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ openable(x) ]
[1] VP conjunction: [ openable(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <the noun is openable>:
basic representation:               [ exists x: openable(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ openable(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ p44_closed(x) ]
[1] VP conjunction: [ p44_closed(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is closed>:
basic representation:               [ exists x: p44_closed(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ p44_closed(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ p44_closed(x) ]
[1] VP conjunction: [ p44_closed(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is closed>:
basic representation:               [ exists x: p44_closed(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ p44_closed(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(player) such that: []
[1] object NP: QUANTITY_TY(Q33_actor) conjunction: []
[1] VP conjunction: [ can-see(QUANTITY_TY(player),QUANTITY_TY(Q33_actor)) ]

result of sentence conversion for <player can see the actor>:
basic representation:               [ can-see(QUANTITY_TY(player),QUANTITY_TY(Q33_actor)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [  NOT  [ K2'thing'(x) ]
[1] VP conjunction: [  NOT  [ K2'thing'(x) ^ is(QUANTITY_TY(noun),x) ]  ]

result of sentence conversion for <noun is not a thing>:
basic representation:               [  NOT  [ exists x: K2'thing'(x) ^ is(QUANTITY_TY(noun),x) ]  ]
simp_negated_satisfiable:           [ cardinality(== 0)x: K2'thing'(x) => is(QUANTITY_TY(noun),x) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [  NOT  [ clothing(x) ]
[1] VP conjunction: [  NOT  [ clothing(x) ^ is(QUANTITY_TY(noun),x) ]  ]

result of sentence conversion for <the noun is not wearable>:
basic representation:               [  NOT  [ exists x: clothing(x) ^ is(QUANTITY_TY(noun),x) ]  ]
simp_eliminate_redundant_variables: [  NOT  [ clothing(QUANTITY_TY(noun)) ]  ]

[1] subject NP: function['holder of the noun'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: QUANTITY_TY(Q33_actor) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(function['holder of the noun'/PHRASE_TY/TO_DECIDE_TY],QUANTITY_TY(Q33_actor)) ]  ]

result of sentence conversion for <holder of the noun is not the actor>:
basic representation:               [  NOT  [ is(function['holder of the noun'/PHRASE_TY/TO_DECIDE_TY],QUANTITY_TY(Q33_actor)) ]  ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is wearing the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor wears the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]  ]

result of sentence conversion for <actor is not wearing the noun>:
basic representation:               [  NOT  [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]  ]
simp_reduce_predicates:             [  NOT  [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]  ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ carries(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor carries the noun>:
basic representation:               [ carries(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_CarriedBy(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: function['the holder of the noun'/PHRASE_TY/TO_DECIDE_TY] conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(QUANTITY_TY(Q33_actor),function['the holder of the noun'/PHRASE_TY/TO_DECIDE_TY]) ]  ]

result of sentence conversion for <actor is not the holder of the noun>:
basic representation:               [  NOT  [ is(QUANTITY_TY(Q33_actor),function['the holder of the noun'/PHRASE_TY/TO_DECIDE_TY]) ]  ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(second) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(second)) ]

result of sentence conversion for <actor is the second noun>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(second)) ]

[1] subject NP: QUANTITY_TY(second) such that: []
[1] object NP: x conjunction: [  NOT  [ K8'person'(x) ]
[1] VP conjunction: [  NOT  [ K8'person'(x) ^ is(QUANTITY_TY(second),x) ]  ]

result of sentence conversion for <second noun is not a person>:
basic representation:               [  NOT  [ exists x: K8'person'(x) ^ is(QUANTITY_TY(second),x) ]  ]
simp_negated_satisfiable:           [ cardinality(== 0)x: K8'person'(x) => is(QUANTITY_TY(second),x) ]

Compiling ln as 0 at </Applications/Inform.app/Contents/Resources/Inform7/Extensions/graham nelson/standard rules>
[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(second) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(second),QUANTITY_TY(player)) ]

result of sentence conversion for <second noun is the player>:
basic representation:               [ is(QUANTITY_TY(second),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: function['the holder of the noun'/PHRASE_TY/TO_DECIDE_TY] conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(QUANTITY_TY(Q33_actor),function['the holder of the noun'/PHRASE_TY/TO_DECIDE_TY]) ]  ]

result of sentence conversion for <actor is not the holder of the noun>:
basic representation:               [  NOT  [ is(QUANTITY_TY(Q33_actor),function['the holder of the noun'/PHRASE_TY/TO_DECIDE_TY]) ]  ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(second) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(second)) ]

result of sentence conversion for <actor is the second noun>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(second)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is wearing the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

Chief AN for taking off the noun is Taking off
[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is wearing the noun>:
basic representation:               [ wears(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]
simp_reduce_predicates:             [ is(QUANTITY_TY(Q33_actor),I7_WornBy(QUANTITY_TY(noun))) ]

[1] subject NP: QUANTITY_TY(second) such that: []
[1] object NP: x conjunction: [  NOT  [ K8'person'(x) ]
[1] VP conjunction: [  NOT  [ K8'person'(x) ^ is(QUANTITY_TY(second),x) ]  ]

result of sentence conversion for <second noun is not a person>:
basic representation:               [  NOT  [ exists x: K8'person'(x) ^ is(QUANTITY_TY(second),x) ]  ]
simp_negated_satisfiable:           [ cardinality(== 0)x: K8'person'(x) => is(QUANTITY_TY(second),x) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: QUANTITY_TY(Q33_actor) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(noun),QUANTITY_TY(Q33_actor)) ]

result of sentence conversion for <noun is the actor>:
basic representation:               [ is(QUANTITY_TY(noun),QUANTITY_TY(Q33_actor)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is the noun>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(noun) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

result of sentence conversion for <actor is the noun>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <the actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

Chief AN for taking inventory is Taking inventory
[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: QUANTITY_TY(Q33_actor) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(noun),QUANTITY_TY(Q33_actor)) ]

result of sentence conversion for <noun is the actor>:
basic representation:               [ is(QUANTITY_TY(noun),QUANTITY_TY(Q33_actor)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: x conjunction: [ female(x) ]
[1] VP conjunction: [ female(x) ^ is(QUANTITY_TY(Q33_actor),x) ]

result of sentence conversion for <actor is female>:
basic representation:               [ exists x: female(x) ^ is(QUANTITY_TY(Q33_actor),x) ]
simp_eliminate_redundant_variables: [ female(QUANTITY_TY(Q33_actor)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K8'person'(x) ]
[1] VP conjunction: [ K8'person'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a person>:
basic representation:               [ exists x: K8'person'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K8'person'(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(noun),QUANTITY_TY(player)) ]

result of sentence conversion for <noun is the player>:
basic representation:               [ is(QUANTITY_TY(noun),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: function['the holder of the noun'/PHRASE_TY/TO_DECIDE_TY] conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ is(QUANTITY_TY(Q33_actor),function['the holder of the noun'/PHRASE_TY/TO_DECIDE_TY]) ]  ]

result of sentence conversion for <actor is not the holder of the noun>:
basic representation:               [  NOT  [ is(QUANTITY_TY(Q33_actor),function['the holder of the noun'/PHRASE_TY/TO_DECIDE_TY]) ]  ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ static(x) ]
[1] VP conjunction: [ static(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is fixed in place>:
basic representation:               [ exists x: static(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ static(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ scenery(x) ]
[1] VP conjunction: [ scenery(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is scenery>:
basic representation:               [ exists x: scenery(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ scenery(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K8'person'(x) ]
[1] VP conjunction: [ K8'person'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a person>:
basic representation:               [ exists x: K8'person'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K8'person'(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ static(x) ]
[1] VP conjunction: [ static(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is fixed in place>:
basic representation:               [ exists x: static(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ static(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ scenery(x) ]
[1] VP conjunction: [ scenery(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is scenery>:
basic representation:               [ exists x: scenery(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ scenery(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K8'person'(x) ]
[1] VP conjunction: [ K8'person'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a person>:
basic representation:               [ exists x: K8'person'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K8'person'(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ static(x) ]
[1] VP conjunction: [ static(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is fixed in place>:
basic representation:               [ exists x: static(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ static(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ scenery(x) ]
[1] VP conjunction: [ scenery(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is scenery>:
basic representation:               [ exists x: scenery(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ scenery(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K8'person'(x) ]
[1] VP conjunction: [ K8'person'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a person>:
basic representation:               [ exists x: K8'person'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K8'person'(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(noun) such that: []
[1] object NP: x conjunction: [ K8'person'(x) ]
[1] VP conjunction: [ K8'person'(x) ^ is(QUANTITY_TY(noun),x) ]

result of sentence conversion for <noun is a person>:
basic representation:               [ exists x: K8'person'(x) ^ is(QUANTITY_TY(noun),x) ]
simp_eliminate_redundant_variables: [ K8'person'(QUANTITY_TY(noun)) ]

[1] subject NP: QUANTITY_TY(Q33_actor) such that: []
[1] object NP: QUANTITY_TY(player) conjunction: []
[1] VP conjunction: [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

result of sentence conversion for <actor is the player>:
basic representation:               [ is(QUANTITY_TY(Q33_actor),QUANTITY_TY(player)) ]

[1] subject NP: QUANTITY_TY(player) such that: []
[1] object NP: O97'pocketwatch' conjunction: []
[1] VP conjunction: [ carries(QUANTITY_TY(player),O97'pocketwatch') ]

result of sentence conversion for <player carries the pocketwatch>:
basic representation:               [ carries(QUANTITY_TY(player),O97'pocketwatch') ]
simp_reduce_predicates:             [ is(QUANTITY_TY(player),I7_CarriedBy(O97'pocketwatch')) ]



==== Phase XI.4 ... Compiling the rulebooks ====

Compiling initial value of quantity: Quantity Q33_actor believed variable 'actor' = VALUE_TY/OBJECT_TY(<null>) <K8'person'>

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
[1] subject NP: LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY) such that: []
[1] object NP: QUANTITY_TY(real_location) conjunction: []
[1] VP conjunction: [ adjacent-from(LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY),QUANTITY_TY(real_location)) ]

result of sentence conversion for <it is adjacent to the location>:
basic representation:               [ adjacent-from(LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY),QUANTITY_TY(real_location)) ]
simp_turn_right_way_round:          [ adjacent-to(QUANTITY_TY(real_location),LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY)) ]

[1] subject NP: QUANTITY_TY(player) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY) conjunction: []
[1] VP conjunction: [ can-see(QUANTITY_TY(player),LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY)) ]

result of sentence conversion for <the player can see it>:
basic representation:               [ can-see(QUANTITY_TY(player),LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY)) ]

[1] subject NP: QUANTITY_TY(player) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY) conjunction: []
[1] VP conjunction: [ can-touch(QUANTITY_TY(player),LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY)) ]

result of sentence conversion for <the player can touch it>:
basic representation:               [ can-touch(QUANTITY_TY(player),LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY)) ]

[1] subject NP: QUANTITY_TY(player) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ can-see(QUANTITY_TY(player),LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY)) ]  ]

result of sentence conversion for <the player cannot see it>:
basic representation:               [  NOT  [ can-see(QUANTITY_TY(player),LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY)) ]  ]

[1] subject NP: QUANTITY_TY(player) such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ can-touch(QUANTITY_TY(player),LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY)) ]  ]

result of sentence conversion for <the player cannot touch it>:
basic representation:               [  NOT  [ can-touch(QUANTITY_TY(player),LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY)) ]  ]

[1] subject NP: function['the holder of it'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY) conjunction: []
[1] VP conjunction: [ conceals(function['the holder of it'/PHRASE_TY/TO_DECIDE_TY],LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY)) ]

result of sentence conversion for <the holder of it conceals it>:
basic representation:               [ conceals(function['the holder of it'/PHRASE_TY/TO_DECIDE_TY],LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY)) ]

[1] subject NP: function['the holder of it'/PHRASE_TY/TO_DECIDE_TY] such that: []
[1] object NP: LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY) conjunction: [  NOT  [  ]
[1] VP conjunction: [  NOT  [ conceals(function['the holder of it'/PHRASE_TY/TO_DECIDE_TY],LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY)) ]  ]

result of sentence conversion for <the holder of it does not conceal it>:
basic representation:               [  NOT  [ conceals(function['the holder of it'/PHRASE_TY/TO_DECIDE_TY],LOCAL_VARIABLE_TY(t_0;I6_OBJECT_SPEC_TY)) ]  ]



==== Phase XI.5 ... Compiling the text routines ====



==== Phase XI.6 ... Compiling the loop-over-scope routines ====



==== Phase XI.7 ... Compiling the named action patterns ====



==== Phase XI.8 ... Compiling the action routines ====

Compiling initial value of quantity: Quantity Q34_thing_implicitly_taken believed variable 'thing implicitly taken' = VALUE_TY/OBJECT_TY(<null>)

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity Q35_room_gone_from believed variable 'room gone from' = VALUE_TY/OBJECT_TY(<null>) <K1'room'>

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity Q36_room_gone_to believed variable 'room gone to' = VALUE_TY/OBJECT_TY(<null>)

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity Q37_door_gone_through believed variable 'door gone through' = VALUE_TY/OBJECT_TY(<null>)

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity Q38_vehicle_gone_by believed variable 'vehicle gone by' = VALUE_TY/OBJECT_TY(<null>)

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity Q39_thing_gone_with believed variable 'thing gone with' = VALUE_TY/OBJECT_TY(<null>)

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity Q40_container_exited_from believed variable 'container exited from' = VALUE_TY/OBJECT_TY(<null>)

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity Q41_room_describing_action believed variable 'room-describing action' = VALUE_TY/ACTION_NAME_TY

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/ACTION_NAME_TY
Compiling initial value of quantity: Quantity Q42_visibility_level_count believed variable 'visibility level count' = VALUE_TY/NUMBER_TY

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/NUMBER_TY
Compiling initial value of quantity: Quantity Q43_visibility_ceiling believed variable 'visibility ceiling' = VALUE_TY/OBJECT_TY(<null>)

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/OBJECT_TY(<null>)
Compiling initial value of quantity: Quantity the_time believed variable 'time of day' = VALUE_TY/TIME_TY

From initial value UNKNOWN_TY
Initialising missing initial type: VALUE_TY/TIME_TY


==== Phase XI.9 ... Compiling chronology ====



-----------------------------------------------------
Phase XII ... Compiling grammar
-----------------------------------------------------



==== Phase XII.1 ... Slashing grammar (G1) ====



==== Phase XII.2 ... Determining grammar (G2) ====



==== Phase XII.3 ... Compiling type gprs ====



==== Phase XII.4 ... Compiling filters ====



==== Phase XII.5 ... Compiling grammar verbs ====



==== Phase XII.6 ... Sorting and compiling non-value grammar (G3, G4) ====



-----------------------------------------------------
Phase XIII ... Debugging verbs at run-time
-----------------------------------------------------



-----------------------------------------------------
Phase XIV ... Winding up
-----------------------------------------------------



==== Phase XIV.1 ... Compiling routines from predicate calculus ====



-----------------------------------------------------
Phase XV ... Compilation now complete
-----------------------------------------------------

Compiling initial value of quantity: Quantity Story believed variable 'story title' = VALUE_TY/TEXT_TY

From initial value '"InfoComp Game Entry"'/VALUE_TY/TEXT_TY
Compiling initial value of quantity: Quantity Q27_story_author believed variable 'story author' = VALUE_TY/TEXT_TY

From initial value '"Ben Collins-Sussman and David Anderson"'/VALUE_TY/TEXT_TY
Compiling initial value of quantity: Quantity Q30_story_description believed variable 'story description' = VALUE_TY/TEXT_TY

From initial value '"Here is an introductory paragraph.  Make it clear that we're in rural Wyoming in 1870... just one year after the first transcontinental railway was completed, and 3 years after the invention of dynamite.  Dynamite is a new thing.  Player is an anti-hero, attempting to rob a train.
"'/VALUE_TY/TEXT_TY


That concludes the debugging log from this run of NI.
Its contents were as follows, and can be changed by placing
text like 'Include property creations in the debugging log.'
or 'Omit everything from the debugging log.' in the source.

Included:
debugging log inclusions
debugging log contents
verifications  
semantic transformations 
object creations 
action creations 
property creations 
constructed plurals 
property provision 
changes of kind
asterisked syntax 
type creations 
brief picture 
object tree 
quantity compilation 
object compilation 
quantity creations 
pronouns  
implications  
table construction 
predicate calculus 

Omitted:
constructed past participles
rule attachments 
library rules 
assertions  
inferences  
property assignments 
type casts 
property translations 
phrasebook  
phrase creations 
phrase action patterns
phrase comparisons 
phrase compilation 
type specification reservoir
expressions  
invocations  
rulebook compilation 
grammar  
lexical output 
headings  
memory allocation 
grammar construction 
text routine compilation
action pattern compilation
vocabulary  
time periods 
description compilation 
local variables 
spatial map 
excerpt parsing 
excerpt meanings 
s grammar 
noun phrase resolution
predicate calculus workings
extensions census 
action pattern parsing
type permissions 
type usage 
assemblies  
invocation workings 
specificities  
